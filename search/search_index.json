{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TravelDen Documentation","text":"<p>Welcome to the comprehensive documentation for TravelDen, a modern travel booking platform built with microservices architecture.</p>"},{"location":"#overview","title":"Overview","text":"<p>TravelDen is a scalable travel booking system that consists of multiple microservices working together to provide a seamless travel booking experience. This documentation covers the architecture, API endpoints, deployment procedures, and development guidelines.</p>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph TB\n    A[Client Applications] --&gt; B[API Gateway]\n    B --&gt; C[User Service]\n    B --&gt; D[Product Service]\n    B --&gt; E[Booking Service]\n    B --&gt; F[Payment Service]\n\n    C --&gt; G[(User Database)]\n    D --&gt; H[(Product Database)]\n    E --&gt; I[(Booking Database)]\n    F --&gt; J[(Payment Database)]\n\n    K[Message Queue] --&gt; C\n    K --&gt; D\n    K --&gt; E\n    K --&gt; F</code></pre>"},{"location":"#services","title":"Services","text":"<p>Our platform consists of four main microservices:</p> <ul> <li>User Service - Handles user authentication, profiles, and authorization</li> <li>Product Service - Manages travel products, inventory, and search functionality</li> <li>Booking Service - Processes bookings, reservations, and booking lifecycle</li> <li>Payment Service - Handles payments, invoicing, and financial transactions</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#using-docker","title":"Using Docker","text":"<ol> <li>Clone the repository</li> <li>Navigate to the <code>project-docs</code> directory</li> <li>Run the documentation server:</li> </ol> <pre><code>docker-compose up mkdocs\n</code></pre> <ol> <li>Open your browser to <code>http://localhost:8000</code></li> </ol>"},{"location":"#local-development","title":"Local Development","text":"<pre><code>pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin\nmkdocs serve\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udcda Comprehensive API Documentation - Complete REST API reference</li> <li>\ud83c\udfd7\ufe0f Architecture Diagrams - Visual system design with Mermaid</li> <li>\ud83d\udc33 Docker Support - Containerized documentation setup</li> <li>\ud83d\ude80 CI/CD Integration - Automated deployment to GitHub Pages</li> <li>\ud83d\udd0d Search Functionality - Full-text search across all documentation</li> <li>\ud83d\udcf1 Responsive Design - Mobile-friendly documentation</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions to improve our documentation. Please see our Development Guide for more information.</p>"},{"location":"#support","title":"Support","text":"<p>For questions or support, please:</p> <ul> <li>Check our API Documentation</li> <li>Review the Deployment Guide</li> <li>Open an issue on GitHub</li> </ul> <p>Last updated: 2025-07-31</p>"},{"location":"api/getting-started/","title":"API Getting Started","text":"<p>Welcome to the TravelDen API documentation. This guide will help you get started with integrating our travel booking services.</p>"},{"location":"api/getting-started/#base-url","title":"Base URL","text":"<pre><code>https://api.travelden.com/v1\n</code></pre>"},{"location":"api/getting-started/#authentication","title":"Authentication","text":"<p>All API requests require authentication using Bearer tokens.</p> <pre><code>Authorization: Bearer YOUR_API_TOKEN\n</code></pre>"},{"location":"api/getting-started/#getting-an-api-token","title":"Getting an API Token","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Auth API\n    participant Token Store\n\n    Client-&gt;&gt;Auth API: POST /auth/login\n    Note over Client,Auth API: email, password\n    Auth API-&gt;&gt;Token Store: Validate credentials\n    Token Store--&gt;&gt;Auth API: User validated\n    Auth API--&gt;&gt;Client: JWT Token + Refresh Token\n\n    Note over Client: Store tokens securely\n\n    Client-&gt;&gt;Auth API: API Request with Bearer token\n    Auth API-&gt;&gt;Token Store: Validate token\n    Token Store--&gt;&gt;Auth API: Token valid\n    Auth API--&gt;&gt;Client: API Response</code></pre>"},{"location":"api/getting-started/#authentication-example","title":"Authentication Example","text":"<pre><code># Login to get token\ncurl -X POST https://api.travelden.com/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"user@example.com\",\n    \"password\": \"your_password\"\n  }'\n\n# Response\n{\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n  \"token_type\": \"bearer\",\n  \"expires_in\": 3600,\n  \"refresh_token\": \"def50200...\"\n}\n\n# Use token in subsequent requests\ncurl -X GET https://api.travelden.com/v1/products \\\n  -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\"\n</code></pre>"},{"location":"api/getting-started/#rate-limiting","title":"Rate Limiting","text":"<p>API requests are rate-limited to ensure fair usage:</p> Plan Requests per minute Requests per hour Free 60 1,000 Basic 300 10,000 Premium 1,000 50,000 Enterprise Custom Custom <p>Rate limit headers are included in all responses:</p> <pre><code>X-RateLimit-Limit: 60\nX-RateLimit-Remaining: 59\nX-RateLimit-Reset: 1640995200\n</code></pre>"},{"location":"api/getting-started/#requestresponse-format","title":"Request/Response Format","text":""},{"location":"api/getting-started/#content-type","title":"Content Type","text":"<p>All requests should use <code>application/json</code> content type:</p> <pre><code>Content-Type: application/json\n</code></pre>"},{"location":"api/getting-started/#standard-response-format","title":"Standard Response Format","text":"<pre><code>{\n  \"success\": true,\n  \"data\": {\n    // Response data here\n  },\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": 1,\n      \"per_page\": 20,\n      \"total\": 100,\n      \"last_page\": 5\n    }\n  }\n}\n</code></pre>"},{"location":"api/getting-started/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"The given data was invalid.\",\n    \"details\": {\n      \"email\": [\"The email field is required.\"],\n      \"password\": [\"The password field is required.\"]\n    }\n  }\n}\n</code></pre>"},{"location":"api/getting-started/#common-http-status-codes","title":"Common HTTP Status Codes","text":"Code Meaning Description 200 OK Request successful 201 Created Resource created successfully 400 Bad Request Invalid request data 401 Unauthorized Authentication required 403 Forbidden Insufficient permissions 404 Not Found Resource not found 422 Unprocessable Entity Validation errors 429 Too Many Requests Rate limit exceeded 500 Internal Server Error Server error"},{"location":"api/getting-started/#api-workflow","title":"API Workflow","text":"<pre><code>graph TD\n    A[Client Application] --&gt; B[Authenticate]\n    B --&gt; C[Get API Token]\n    C --&gt; D[Search Products]\n    D --&gt; E[Create Booking]\n    E --&gt; F[Process Payment]\n    F --&gt; G[Confirm Booking]\n    G --&gt; H[Get Booking Details]\n\n    B --&gt; I[Handle Auth Errors]\n    D --&gt; J[Handle Search Errors]\n    E --&gt; K[Handle Booking Errors]\n    F --&gt; L[Handle Payment Errors]</code></pre>"},{"location":"api/getting-started/#quick-start-example","title":"Quick Start Example","text":"<p>Here's a complete example of searching for flights and creating a booking:</p>"},{"location":"api/getting-started/#1-authenticate","title":"1. Authenticate","text":"<pre><code>curl -X POST https://api.travelden.com/v1/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"user@example.com\",\n    \"password\": \"password123\"\n  }'\n</code></pre>"},{"location":"api/getting-started/#2-search-products","title":"2. Search Products","text":"<pre><code>curl -X GET \"https://api.travelden.com/v1/products/search?type=flight&amp;origin=NYC&amp;destination=LAX&amp;departure_date=2024-03-15\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n</code></pre>"},{"location":"api/getting-started/#3-create-booking","title":"3. Create Booking","text":"<pre><code>curl -X POST https://api.travelden.com/v1/bookings \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"product_id\": \"flight-123\",\n    \"passengers\": [\n      {\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\",\n        \"date_of_birth\": \"1990-01-01\",\n        \"passport_number\": \"A12345678\"\n      }\n    ]\n  }'\n</code></pre>"},{"location":"api/getting-started/#4-process-payment","title":"4. Process Payment","text":"<pre><code>curl -X POST https://api.travelden.com/v1/payments \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"booking_id\": \"booking-456\",\n    \"payment_method\": \"credit_card\",\n    \"card_token\": \"card_token_from_frontend\"\n  }'\n</code></pre>"},{"location":"api/getting-started/#sdks-and-libraries","title":"SDKs and Libraries","text":"<p>We provide official SDKs for popular programming languages:</p> <ul> <li>JavaScript/Node.js: <code>npm install @travelden/api-client</code></li> <li>Python: <code>pip install travelden-api</code></li> <li>PHP: <code>composer require travelden/api-client</code></li> <li>Java: Available on Maven Central</li> <li>C#: Available on NuGet</li> </ul>"},{"location":"api/getting-started/#javascript-example","title":"JavaScript Example","text":"<pre><code>import TravelDenAPI from '@travelden/api-client';\n\nconst client = new TravelDenAPI({\n  apiKey: 'your-api-key',\n  baseURL: 'https://api.travelden.com/v1'\n});\n\n// Search for flights\nconst flights = await client.products.search({\n  type: 'flight',\n  origin: 'NYC',\n  destination: 'LAX',\n  departureDate: '2024-03-15'\n});\n\n// Create booking\nconst booking = await client.bookings.create({\n  productId: flights.data[0].id,\n  passengers: [{\n    firstName: 'John',\n    lastName: 'Doe',\n    dateOfBirth: '1990-01-01',\n    passportNumber: 'A12345678'\n  }]\n});\n</code></pre>"},{"location":"api/getting-started/#testing","title":"Testing","text":""},{"location":"api/getting-started/#sandbox-environment","title":"Sandbox Environment","text":"<p>Use our sandbox environment for testing:</p> <pre><code>https://api-sandbox.travelden.com/v1\n</code></pre>"},{"location":"api/getting-started/#test-data","title":"Test Data","text":"<p>We provide test data for common scenarios:</p> <ul> <li>Test Credit Cards: Use <code>4111111111111111</code> for successful payments</li> <li>Test Users: Use <code>test@travelden.com</code> with password <code>test123</code></li> <li>Test Products: Search for flights from <code>TEST</code> to <code>DEST</code></li> </ul>"},{"location":"api/getting-started/#support","title":"Support","text":"<ul> <li>Documentation: https://docs.travelden.com</li> <li>API Reference: endpoints.md</li> <li>Support Email: api-support@travelden.com</li> <li>Status Page: https://status.travelden.com</li> </ul>"},{"location":"api/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Authentication Guide</li> <li>API Endpoints Reference</li> <li>Service Documentation</li> <li>Error Handling Best Practices</li> </ul>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>TravelDen is built using a microservices architecture pattern, designed for scalability, maintainability, and fault tolerance.</p>"},{"location":"architecture/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"Client Layer\"\n        WEB[Web Application]\n        MOBILE[Mobile App]\n        API_CLIENT[API Clients]\n    end\n\n    subgraph \"Gateway Layer\"\n        GATEWAY[API Gateway]\n        LB[Load Balancer]\n    end\n\n    subgraph \"Service Layer\"\n        USER[User Service]\n        PRODUCT[Product Service]\n        BOOKING[Booking Service]\n        PAYMENT[Payment Service]\n    end\n\n    subgraph \"Data Layer\"\n        USER_DB[(User DB)]\n        PRODUCT_DB[(Product DB)]\n        BOOKING_DB[(Booking DB)]\n        PAYMENT_DB[(Payment DB)]\n        CACHE[(Redis Cache)]\n    end\n\n    subgraph \"Infrastructure\"\n        QUEUE[Message Queue]\n        MONITOR[Monitoring]\n        LOGS[Logging]\n    end\n\n    WEB --&gt; LB\n    MOBILE --&gt; LB\n    API_CLIENT --&gt; LB\n    LB --&gt; GATEWAY\n\n    GATEWAY --&gt; USER\n    GATEWAY --&gt; PRODUCT\n    GATEWAY --&gt; BOOKING\n    GATEWAY --&gt; PAYMENT\n\n    USER --&gt; USER_DB\n    PRODUCT --&gt; PRODUCT_DB\n    BOOKING --&gt; BOOKING_DB\n    PAYMENT --&gt; PAYMENT_DB\n\n    USER --&gt; CACHE\n    PRODUCT --&gt; CACHE\n    BOOKING --&gt; CACHE\n    PAYMENT --&gt; CACHE\n\n    USER --&gt; QUEUE\n    PRODUCT --&gt; QUEUE\n    BOOKING --&gt; QUEUE\n    PAYMENT --&gt; QUEUE\n\n    QUEUE --&gt; USER\n    QUEUE --&gt; PRODUCT\n    QUEUE --&gt; BOOKING\n    QUEUE --&gt; PAYMENT</code></pre>"},{"location":"architecture/#service-communication","title":"Service Communication","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Gateway\n    participant UserService\n    participant ProductService\n    participant BookingService\n    participant PaymentService\n    participant Queue\n\n    Client-&gt;&gt;Gateway: Search Products\n    Gateway-&gt;&gt;ProductService: GET /products/search\n    ProductService--&gt;&gt;Gateway: Product Results\n    Gateway--&gt;&gt;Client: Search Results\n\n    Client-&gt;&gt;Gateway: Create Booking\n    Gateway-&gt;&gt;BookingService: POST /bookings\n    BookingService-&gt;&gt;Queue: Booking Created Event\n    BookingService--&gt;&gt;Gateway: Booking Confirmation\n    Gateway--&gt;&gt;Client: Booking Response\n\n    Queue-&gt;&gt;PaymentService: Process Payment\n    PaymentService-&gt;&gt;Queue: Payment Processed Event\n    Queue-&gt;&gt;BookingService: Update Booking Status</code></pre>"},{"location":"architecture/#design-principles","title":"Design Principles","text":""},{"location":"architecture/#1-microservices-architecture","title":"1. Microservices Architecture","text":"<ul> <li>Service Independence: Each service can be developed, deployed, and scaled independently</li> <li>Technology Diversity: Services can use different technologies best suited for their domain</li> <li>Fault Isolation: Failure in one service doesn't cascade to others</li> </ul>"},{"location":"architecture/#2-domain-driven-design","title":"2. Domain-Driven Design","text":"<ul> <li>Bounded Contexts: Each service represents a distinct business domain</li> <li>Ubiquitous Language: Consistent terminology within each domain</li> <li>Aggregate Boundaries: Clear data ownership and consistency boundaries</li> </ul>"},{"location":"architecture/#3-event-driven-architecture","title":"3. Event-Driven Architecture","text":"<ul> <li>Asynchronous Communication: Services communicate through events</li> <li>Loose Coupling: Services don't need direct knowledge of each other</li> <li>Scalability: Events can be processed at different rates</li> </ul>"},{"location":"architecture/#technology-stack","title":"Technology Stack","text":"Component Technology Purpose Runtime PHP 8.2 + Laravel Application framework Database MySQL 8.0 Primary data storage Cache Redis Session storage and caching Queue Redis/RabbitMQ Asynchronous message processing Gateway Nginx Load balancing and routing Containerization Docker Service packaging and deployment Orchestration Docker Compose Local development environment"},{"location":"architecture/#scalability-patterns","title":"Scalability Patterns","text":""},{"location":"architecture/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code>graph LR\n    LB[Load Balancer] --&gt; S1[Service Instance 1]\n    LB --&gt; S2[Service Instance 2]\n    LB --&gt; S3[Service Instance 3]\n    LB --&gt; S4[Service Instance N]</code></pre>"},{"location":"architecture/#database-scaling","title":"Database Scaling","text":"<pre><code>graph TB\n    APP[Application] --&gt; MASTER[(Master DB)]\n    APP --&gt; REPLICA1[(Read Replica 1)]\n    APP --&gt; REPLICA2[(Read Replica 2)]\n    MASTER --&gt; REPLICA1\n    MASTER --&gt; REPLICA2</code></pre>"},{"location":"architecture/#security-architecture","title":"Security Architecture","text":"<pre><code>graph TB\n    CLIENT[Client] --&gt; WAF[Web Application Firewall]\n    WAF --&gt; GATEWAY[API Gateway]\n    GATEWAY --&gt; AUTH[Authentication Service]\n    AUTH --&gt; JWT[JWT Token]\n    GATEWAY --&gt; SERVICES[Microservices]\n    SERVICES --&gt; RBAC[Role-Based Access Control]</code></pre>"},{"location":"architecture/#monitoring-and-observability","title":"Monitoring and Observability","text":"<ul> <li>Health Checks: Each service exposes health endpoints</li> <li>Metrics Collection: Application and infrastructure metrics</li> <li>Distributed Tracing: Request tracing across services</li> <li>Centralized Logging: Aggregated logs from all services</li> <li>Alerting: Proactive monitoring and alerting</li> </ul>"},{"location":"architecture/#next-steps","title":"Next Steps","text":"<ul> <li>System Design Details</li> <li>Database Schema</li> <li>API Documentation</li> <li>Deployment Guide</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/","title":"Lagos Aviation Academy Certificate Automation System","text":""},{"location":"certificate-automation/laravel-implementation-guide/#laravel-implementation-guide-with-google-saml-authentication","title":"Laravel Implementation Guide with Google SAML Authentication","text":""},{"location":"certificate-automation/laravel-implementation-guide/#document-information","title":"Document Information","text":"<ul> <li>Version: 2.0</li> <li>Date: August 14, 2025</li> <li>Framework: Laravel 11.x</li> <li>Authentication: Google SAML</li> <li>Status: Implementation Ready</li> <li>Classification: Internal Technical Documentation</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Overview</li> <li>Architecture Design</li> <li>Authentication Implementation</li> <li>Data Models and Schemas</li> <li>API Specifications</li> <li>Workflow Implementations</li> <li>Security Best Practices</li> <li>Certificate Generation Service</li> <li>Testing and Validation</li> <li>Performance Optimization</li> </ol>"},{"location":"certificate-automation/laravel-implementation-guide/#1-system-overview","title":"1. System Overview","text":""},{"location":"certificate-automation/laravel-implementation-guide/#11-purpose","title":"1.1 Purpose","text":"<p>The Certificate Automation System streamlines the generation, approval, and distribution of graduation certificates for Lagos Aviation Academy using Laravel framework with Google SAML authentication, reducing processing time by 95% while maintaining enterprise-level security.</p>"},{"location":"certificate-automation/laravel-implementation-guide/#12-scope","title":"1.2 Scope","text":"<ul> <li>Laravel-based certificate generation workflow</li> <li>Google SAML authentication for Head of School and School Founder</li> <li>Multi-stage approval process with role-based access</li> <li>Digital signature integration</li> <li>Certificate verification portal</li> <li>Bulk graduate data processing</li> <li>Automated email distribution system</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#13-technology-stack","title":"1.3 Technology Stack","text":"<ul> <li>Framework: Laravel </li> <li>Authentication: Google SAML 2.0</li> <li>Database: MySQL 8.0+ / PostgreSQL 14+</li> <li>Queue System: Redis with Laravel Horizon</li> <li>File Storage: AWS S3 / Local Storage</li> <li>PDF Generation: DomPDF / wkhtmltopdf</li> <li>Email Service: Laravel Mail with SES/SMTP</li> <li>Caching: Redis</li> <li>Testing: PHPUnit with Feature/Unit tests</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#14-key-stakeholders-and-access-control","title":"1.4 Key Stakeholders and Access Control","text":"Role Responsibilities SAML Email Domain System Access School Administrator Data upload, template management admin@lagosaviationacademy.edu.ng Full system access Head of School First-level approval head@lagosaviationacademy.edu.ng Approval dashboard School Founder Final approval, signature founder@lagosaviationacademy.edu.ng Executive dashboard IT Support System maintenance it@lagosaviationacademy.edu.ng Administrative access"},{"location":"certificate-automation/laravel-implementation-guide/#2-architecture-design","title":"2. Architecture Design","text":""},{"location":"certificate-automation/laravel-implementation-guide/#21-laravel-application-structure","title":"2.1 Laravel Application Structure","text":"<pre><code>app/\n\u251c\u2500\u2500 Console/Commands/\n\u2502   \u251c\u2500\u2500 ProcessCertificateBatch.php\n\u2502   \u2514\u2500\u2500 GenerateCertificates.php\n\u251c\u2500\u2500 Events/\n\u2502   \u251c\u2500\u2500 BatchApproved.php\n\u2502   \u2514\u2500\u2500 CertificateGenerated.php\n\u251c\u2500\u2500 Http/\n\u2502   \u251c\u2500\u2500 Controllers/\n\u2502   \u2502   \u251c\u2500\u2500 Auth/SamlController.php\n\u2502   \u2502   \u251c\u2500\u2500 CertificateController.php\n\u2502   \u2502   \u251c\u2500\u2500 ApprovalController.php\n\u2502   \u2502   \u2514\u2500\u2500 VerificationController.php\n\u2502   \u251c\u2500\u2500 Middleware/\n\u2502   \u2502   \u251c\u2500\u2500 SamlAuthenticated.php\n\u2502   \u2502   \u2514\u2500\u2500 RoleBasedAccess.php\n\u2502   \u2514\u2500\u2500 Requests/\n\u2502       \u251c\u2500\u2500 BulkUploadRequest.php\n\u2502       \u2514\u2500\u2500 ApprovalRequest.php\n\u251c\u2500\u2500 Jobs/\n\u2502   \u251c\u2500\u2500 GenerateCertificateJob.php\n\u2502   \u251c\u2500\u2500 SendApprovalNotification.php\n\u2502   \u2514\u2500\u2500 ProcessBulkUpload.php\n\u251c\u2500\u2500 Listeners/\n\u2502   \u251c\u2500\u2500 SendCertificateEmail.php\n\u2502   \u2514\u2500\u2500 UpdateBatchStatus.php\n\u251c\u2500\u2500 Models/\n\u2502   \u251c\u2500\u2500 Graduate.php\n\u2502   \u251c\u2500\u2500 CertificateBatch.php\n\u2502   \u251c\u2500\u2500 Certificate.php\n\u2502   \u2514\u2500\u2500 User.php\n\u251c\u2500\u2500 Services/\n\u2502   \u251c\u2500\u2500 SamlAuthService.php\n\u2502   \u251c\u2500\u2500 CertificateGenerationService.php\n\u2502   \u251c\u2500\u2500 ApprovalWorkflowService.php\n\u2502   \u2514\u2500\u2500 EmailNotificationService.php\n\u2514\u2500\u2500 Traits/\n    \u251c\u2500\u2500 HasApprovalWorkflow.php\n    \u2514\u2500\u2500 GeneratesCertificates.php\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#22-high-level-architecture-flow","title":"2.2 High-Level Architecture Flow","text":"<pre><code>graph TB\n    subgraph \"Authentication Layer\"\n        A[Google SAML Provider]\n        B[Laravel SAML Service]\n        C[Role-Based Access Control]\n    end\n\n    subgraph \"Data Input Layer\"\n        D[Bulk CSV Upload Interface]\n        E[Manual Entry Interface]\n        F[Data Validation Service]\n    end\n\n    subgraph \"Workflow Layer\"\n        G[Laravel Queue System]\n        H[Approval Workflow Service]\n        I[Event-Driven Notifications]\n    end\n\n    subgraph \"Approval Layer\"\n        J[Head of School Dashboard]\n        K[Founder Dashboard]\n        L[Approval Decision Engine]\n    end\n\n    subgraph \"Certificate Generation Layer\"\n        M[Certificate Generation Service]\n        N[PDF Template Engine]\n        O[Digital Signature Service]\n    end\n\n    subgraph \"Distribution Layer\"\n        P[Laravel Mail Service]\n        Q[File Storage Service]\n        R[Verification Portal]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; F\n    F --&gt; G\n    G --&gt; H\n    H --&gt; I\n    I --&gt; J\n    I --&gt; K\n    J --&gt; L\n    K --&gt; L\n    L --&gt; M\n    M --&gt; N\n    N --&gt; O\n    O --&gt; P\n    O --&gt; Q\n    Q --&gt; R</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#3-authentication-implementation","title":"3. Authentication Implementation","text":""},{"location":"certificate-automation/laravel-implementation-guide/#31-google-saml-configuration","title":"3.1 Google SAML Configuration","text":""},{"location":"certificate-automation/laravel-implementation-guide/#311-saml-service-provider-setup","title":"3.1.1 SAML Service Provider Setup","text":"<pre><code>&lt;?php\n\nnamespace App\\Services;\n\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Log;\nuse OneLogin\\Saml2\\Auth as SamlAuth;\nuse OneLogin\\Saml2\\Settings;\nuse OneLogin\\Saml2\\Utils;\nuse App\\Models\\User;\n\nclass SamlAuthService\n{\n    private $samlAuth;\n    private $settings;\n\n    public function __construct()\n    {\n        $this-&gt;settings = [\n            'sp' =&gt; [\n                'entityId' =&gt; config('saml.sp.entityId'),\n                'assertionConsumerService' =&gt; [\n                    'url' =&gt; route('saml.acs'),\n                    'binding' =&gt; 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',\n                ],\n                'singleLogoutService' =&gt; [\n                    'url' =&gt; route('saml.sls'),\n                    'binding' =&gt; 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n                ],\n                'NameIDFormat' =&gt; 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress',\n                'x509cert' =&gt; config('saml.sp.x509cert'),\n                'privateKey' =&gt; config('saml.sp.privateKey'),\n            ],\n            'idp' =&gt; [\n                'entityId' =&gt; config('saml.idp.entityId'),\n                'singleSignOnService' =&gt; [\n                    'url' =&gt; config('saml.idp.singleSignOnService'),\n                    'binding' =&gt; 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n                ],\n                'singleLogoutService' =&gt; [\n                    'url' =&gt; config('saml.idp.singleLogoutService'),\n                    'binding' =&gt; 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',\n                ],\n                'x509cert' =&gt; config('saml.idp.x509cert'),\n            ],\n            'security' =&gt; [\n                'nameIdEncrypted' =&gt; false,\n                'authnRequestsSigned' =&gt; true,\n                'logoutRequestSigned' =&gt; true,\n                'logoutResponseSigned' =&gt; true,\n                'signMetadata' =&gt; true,\n                'wantAssertionsSigned' =&gt; true,\n                'wantNameId' =&gt; true,\n                'wantAssertionsEncrypted' =&gt; false,\n                'wantNameIdEncrypted' =&gt; false,\n                'requestedAuthnContext' =&gt; true,\n                'signatureAlgorithm' =&gt; 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',\n                'digestAlgorithm' =&gt; 'http://www.w3.org/2001/04/xmlenc#sha256',\n            ],\n        ];\n\n        $this-&gt;samlAuth = new SamlAuth($this-&gt;settings);\n    }\n\n    /**\n     * Initiate SAML login process\n     */\n    public function login(): void\n    {\n        $this-&gt;samlAuth-&gt;login();\n    }\n\n    /**\n     * Process SAML response and authenticate user\n     */\n    public function processResponse(): array\n    {\n        $this-&gt;samlAuth-&gt;processResponse();\n\n        if (!$this-&gt;samlAuth-&gt;isAuthenticated()) {\n            $errors = $this-&gt;samlAuth-&gt;getErrors();\n            Log::error('SAML Authentication failed', ['errors' =&gt; $errors]);\n\n            return [\n                'success' =&gt; false,\n                'errors' =&gt; $errors,\n                'last_error_reason' =&gt; $this-&gt;samlAuth-&gt;getLastErrorReason()\n            ];\n        }\n\n        $attributes = $this-&gt;samlAuth-&gt;getAttributes();\n        $nameId = $this-&gt;samlAuth-&gt;getNameId();\n\n        // Extract email from SAML response\n        $email = $nameId; // Assuming NameID format is email\n\n        // Validate authorized email domains\n        if (!$this-&gt;isAuthorizedEmail($email)) {\n            Log::warning('Unauthorized SAML login attempt', ['email' =&gt; $email]);\n            return [\n                'success' =&gt; false,\n                'errors' =&gt; ['Unauthorized email domain'],\n                'email' =&gt; $email\n            ];\n        }\n\n        // Create or update user\n        $user = $this-&gt;createOrUpdateUser($email, $attributes);\n\n        // Authenticate user in Laravel\n        Auth::login($user);\n\n        Log::info('SAML authentication successful', ['email' =&gt; $email]);\n\n        return [\n            'success' =&gt; true,\n            'user' =&gt; $user,\n            'email' =&gt; $email\n        ];\n    }\n\n    /**\n     * Check if email is from authorized domain\n     */\n    private function isAuthorizedEmail(string $email): bool\n    {\n        $authorizedEmails = [\n            'head@lagosaviationacademy.edu.ng',\n            'founder@lagosaviationacademy.edu.ng',\n            'admin@lagosaviationacademy.edu.ng',\n            'it@lagosaviationacademy.edu.ng'\n        ];\n\n        return in_array($email, $authorizedEmails);\n    }\n\n    /**\n     * Create or update user from SAML attributes\n     */\n    private function createOrUpdateUser(string $email, array $attributes): User\n    {\n        $userData = [\n            'email' =&gt; $email,\n            'name' =&gt; $attributes['displayName'][0] ?? $email,\n            'role' =&gt; $this-&gt;determineUserRole($email),\n            'last_saml_login' =&gt; now(),\n        ];\n\n        return User::updateOrCreate(\n            ['email' =&gt; $email],\n            $userData\n        );\n    }\n\n    /**\n     * Determine user role based on email\n     */\n    private function determineUserRole(string $email): string\n    {\n        return match ($email) {\n            'head@lagosaviationacademy.edu.ng' =&gt; 'head_of_school',\n            'founder@lagosaviationacademy.edu.ng' =&gt; 'school_founder',\n            'admin@lagosaviationacademy.edu.ng' =&gt; 'administrator',\n            'it@lagosaviationacademy.edu.ng' =&gt; 'it_support',\n            default =&gt; 'unauthorized'\n        };\n    }\n\n    /**\n     * Initiate SAML logout\n     */\n    public function logout(): void\n    {\n        $this-&gt;samlAuth-&gt;logout();\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#312-saml-controller-implementation","title":"3.1.2 SAML Controller Implementation","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers\\Auth;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Services\\SamlAuthService;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass SamlController extends Controller\n{\n    private SamlAuthService $samlService;\n\n    public function __construct(SamlAuthService $samlService)\n    {\n        $this-&gt;samlService = $samlService;\n    }\n\n    /**\n     * Initiate SAML login\n     */\n    public function login()\n    {\n        $this-&gt;samlService-&gt;login();\n    }\n\n    /**\n     * Handle SAML assertion consumer service\n     */\n    public function acs(Request $request)\n    {\n        $result = $this-&gt;samlService-&gt;processResponse();\n\n        if (!$result['success']) {\n            return redirect()-&gt;route('login')\n                -&gt;withErrors(['saml' =&gt; 'Authentication failed: ' . implode(', ', $result['errors'])]);\n        }\n\n        // Redirect based on user role\n        $user = $result['user'];\n\n        return match ($user-&gt;role) {\n            'head_of_school' =&gt; redirect()-&gt;route('approval.dashboard'),\n            'school_founder' =&gt; redirect()-&gt;route('founder.dashboard'),\n            'administrator' =&gt; redirect()-&gt;route('admin.dashboard'),\n            'it_support' =&gt; redirect()-&gt;route('admin.dashboard'),\n            default =&gt; redirect()-&gt;route('unauthorized')\n        };\n    }\n\n    /**\n     * Handle SAML single logout service\n     */\n    public function sls(Request $request)\n    {\n        Auth::logout();\n        $this-&gt;samlService-&gt;logout();\n\n        return redirect()-&gt;route('login')\n            -&gt;with('message', 'Successfully logged out');\n    }\n\n    /**\n     * Display SAML metadata\n     */\n    public function metadata()\n    {\n        $settings = new \\OneLogin\\Saml2\\Settings([\n            'sp' =&gt; config('saml.sp'),\n            'idp' =&gt; config('saml.idp')\n        ]);\n\n        $metadata = $settings-&gt;getSPMetadata();\n        $errors = $settings-&gt;checkSPSettings();\n\n        if (empty($errors)) {\n            return response($metadata, 200, ['Content-Type' =&gt; 'text/xml']);\n        }\n\n        return response()-&gt;json(['errors' =&gt; $errors], 500);\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#313-saml-middleware","title":"3.1.3 SAML Middleware","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass SamlAuthenticated\n{\n    /**\n     * Handle an incoming request.\n     */\n    public function handle(Request $request, Closure $next, ...$roles)\n    {\n        if (!Auth::check()) {\n            return redirect()-&gt;route('saml.login');\n        }\n\n        $user = Auth::user();\n\n        // Check if user has required role\n        if (!empty($roles) &amp;&amp; !in_array($user-&gt;role, $roles)) {\n            abort(403, 'Insufficient permissions');\n        }\n\n        // Verify user is still authorized\n        if ($user-&gt;role === 'unauthorized') {\n            Auth::logout();\n            return redirect()-&gt;route('login')\n                -&gt;withErrors(['auth' =&gt; 'Your account is not authorized to access this system']);\n        }\n\n        return $next($request);\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#4-data-models-and-schemas","title":"4. Data Models and Schemas","text":""},{"location":"certificate-automation/laravel-implementation-guide/#41-user-model","title":"4.1 User Model","text":"<pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\n\nclass User extends Authenticatable\n{\n    use HasFactory, Notifiable;\n\n    protected $fillable = [\n        'name',\n        'email',\n        'role',\n        'last_saml_login',\n        'is_active',\n    ];\n\n    protected $casts = [\n        'last_saml_login' =&gt; 'datetime',\n        'is_active' =&gt; 'boolean',\n    ];\n\n    protected $hidden = [\n        'remember_token',\n    ];\n\n    /**\n     * Check if user can approve certificates\n     */\n    public function canApprove(): bool\n    {\n        return in_array($this-&gt;role, ['head_of_school', 'school_founder']);\n    }\n\n    /**\n     * Check if user is head of school\n     */\n    public function isHeadOfSchool(): bool\n    {\n        return $this-&gt;role === 'head_of_school';\n    }\n\n    /**\n     * Check if user is school founder\n     */\n    public function isSchoolFounder(): bool\n    {\n        return $this-&gt;role === 'school_founder';\n    }\n\n    /**\n     * Check if user is administrator\n     */\n    public function isAdministrator(): bool\n    {\n        return $this-&gt;role === 'administrator';\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#42-graduate-model","title":"4.2 Graduate Model","text":"<pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOne;\n\nclass Graduate extends Model\n{\n    use HasFactory;\n\n    protected $fillable = [\n        'certificate_batch_id',\n        'name',\n        'email',\n        'department',\n        'graduation_date',\n        'certificate_id',\n        'approval_status',\n        'head_approval_date',\n        'founder_approval_date',\n        'head_approved_by',\n        'founder_approved_by',\n        'rejection_reason',\n    ];\n\n    protected $casts = [\n        'graduation_date' =&gt; 'date',\n        'head_approval_date' =&gt; 'datetime',\n        'founder_approval_date' =&gt; 'datetime',\n    ];\n\n    /**\n     * Get the certificate batch\n     */\n    public function batch(): BelongsTo\n    {\n        return $this-&gt;belongsTo(CertificateBatch::class, 'certificate_batch_id');\n    }\n\n    /**\n     * Get the certificate\n     */\n    public function certificate(): HasOne\n    {\n        return $this-&gt;hasOne(Certificate::class);\n    }\n\n    /**\n     * Get head approver\n     */\n    public function headApprover(): BelongsTo\n    {\n        return $this-&gt;belongsTo(User::class, 'head_approved_by');\n    }\n\n    /**\n     * Get founder approver\n     */\n    public function founderApprover(): BelongsTo\n    {\n        return $this-&gt;belongsTo(User::class, 'founder_approved_by');\n    }\n\n    /**\n     * Check if graduate is approved by head\n     */\n    public function isHeadApproved(): bool\n    {\n        return $this-&gt;approval_status === 'head_approved' || $this-&gt;approval_status === 'final_approved';\n    }\n\n    /**\n     * Check if graduate is finally approved\n     */\n    public function isFinalApproved(): bool\n    {\n        return $this-&gt;approval_status === 'final_approved';\n    }\n\n    /**\n     * Check if graduate is rejected\n     */\n    public function isRejected(): bool\n    {\n        return in_array($this-&gt;approval_status, ['rejected_by_head', 'rejected_by_founder']);\n    }\n\n    /**\n     * Check if graduate is rejected by head\n     */\n    public function isRejectedByHead(): bool\n    {\n        return $this-&gt;approval_status === 'rejected_by_head';\n    }\n\n    /**\n     * Check if graduate is rejected by founder\n     */\n    public function isRejectedByFounder(): bool\n    {\n        return $this-&gt;approval_status === 'rejected_by_founder';\n    }\n\n    /**\n     * Scope for pending approval\n     */\n    public function scopePendingApproval($query)\n    {\n        return $query-&gt;where('approval_status', 'pending');\n    }\n\n    /**\n     * Scope for head approved\n     */\n    public function scopeHeadApproved($query)\n    {\n        return $query-&gt;where('approval_status', 'head_approved');\n    }\n\n    /**\n     * Scope for final approved\n     */\n    public function scopeFinalApproved($query)\n    {\n        return $query-&gt;where('approval_status', 'final_approved');\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#43-certificate-batch-model","title":"4.3 Certificate Batch Model","text":"<pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass CertificateBatch extends Model\n{\n    use HasFactory;\n\n    protected $fillable = [\n        'batch_name',\n        'department',\n        'graduation_date',\n        'total_graduates',\n        'approved_count',\n        'batch_status',\n        'created_by',\n        'template_type',\n        'csv_file_path',\n        'head_approval_token',\n        'head_approval_submitted',\n    ];\n\n    protected $casts = [\n        'graduation_date' =&gt; 'date',\n        'total_graduates' =&gt; 'integer',\n        'approved_count' =&gt; 'integer',\n        'head_approval_submitted' =&gt; 'boolean',\n    ];\n\n    /**\n     * Get all graduates in this batch\n     */\n    public function graduates(): HasMany\n    {\n        return $this-&gt;hasMany(Graduate::class);\n    }\n\n    /**\n     * Get the user who created this batch\n     */\n    public function creator(): BelongsTo\n    {\n        return $this-&gt;belongsTo(User::class, 'created_by');\n    }\n\n    /**\n     * Get pending graduates\n     */\n    public function pendingGraduates(): HasMany\n    {\n        return $this-&gt;graduates()-&gt;where('approval_status', 'pending');\n    }\n\n    /**\n     * Get approved graduates\n     */\n    public function approvedGraduates(): HasMany\n    {\n        return $this-&gt;graduates()-&gt;where('approval_status', 'final_approved');\n    }\n\n    /**\n     * Check if batch is ready for head approval\n     */\n    public function isReadyForHeadApproval(): bool\n    {\n        return $this-&gt;batch_status === 'pending_head_approval';\n    }\n\n    /**\n     * Check if batch is ready for founder approval\n     */\n    public function isReadyForFounderApproval(): bool\n    {\n        return $this-&gt;batch_status === 'pending_founder_approval';\n    }\n\n    /**\n     * Update batch status based on graduate approvals\n     */\n    public function updateBatchStatus(): void\n    {\n        $totalGraduates = $this-&gt;graduates()-&gt;count();\n        $pendingCount = $this-&gt;graduates()-&gt;where('approval_status', 'pending')-&gt;count();\n        $headApprovedCount = $this-&gt;graduates()-&gt;where('approval_status', 'head_approved')-&gt;count();\n        $finalApprovedCount = $this-&gt;graduates()-&gt;where('approval_status', 'final_approved')-&gt;count();\n        $rejectedCount = $this-&gt;graduates()-&gt;whereIn('approval_status', ['rejected_by_head', 'rejected_by_founder'])-&gt;count();\n\n        // Determine batch status based on graduate statuses\n        if ($finalApprovedCount === $totalGraduates) {\n            $this-&gt;batch_status = 'completed';\n        } elseif ($pendingCount === 0 &amp;&amp; $headApprovedCount === 0) {\n            // All graduates have been processed (approved or rejected)\n            $this-&gt;batch_status = 'processing_completed';\n        } elseif ($headApprovedCount &gt; 0 &amp;&amp; $pendingCount === 0) {\n            // All pending graduates have been processed by head, some approved\n            $this-&gt;batch_status = 'pending_founder_approval';\n        } elseif ($headApprovedCount &gt; 0 || $rejectedCount &gt; 0) {\n            // Some graduates have been processed\n            $this-&gt;batch_status = 'partial_processed';\n        } else {\n            // All graduates are still pending\n            $this-&gt;batch_status = 'pending_head_approval';\n        }\n\n        $this-&gt;approved_count = $finalApprovedCount;\n        $this-&gt;save();\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#44-certificate-model","title":"4.4 Certificate Model","text":"<pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Certificate extends Model\n{\n    use HasFactory;\n\n    protected $fillable = [\n        'graduate_id',\n        'certificate_number',\n        'file_path',\n        'file_url',\n        'verification_code',\n        'generated_at',\n        'sent_at',\n        'is_verified',\n        'verification_count',\n    ];\n\n    protected $casts = [\n        'generated_at' =&gt; 'datetime',\n        'sent_at' =&gt; 'datetime',\n        'is_verified' =&gt; 'boolean',\n        'verification_count' =&gt; 'integer',\n    ];\n\n    /**\n     * Get the graduate\n     */\n    public function graduate(): BelongsTo\n    {\n        return $this-&gt;belongsTo(Graduate::class);\n    }\n\n    /**\n     * Generate verification code\n     */\n    public static function generateVerificationCode(): string\n    {\n        return strtoupper(substr(md5(uniqid(rand(), true)), 0, 8));\n    }\n\n    /**\n     * Get verification URL\n     */\n    public function getVerificationUrlAttribute(): string\n    {\n        return route('certificate.verify', ['code' =&gt; $this-&gt;verification_code]);\n    }\n\n    /**\n     * Increment verification count\n     */\n    public function incrementVerificationCount(): void\n    {\n        $this-&gt;increment('verification_count');\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#5-api-specifications","title":"5. API Specifications","text":""},{"location":"certificate-automation/laravel-implementation-guide/#51-certificate-generation-api","title":"5.1 Certificate Generation API","text":""},{"location":"certificate-automation/laravel-implementation-guide/#511-generate-certificates-endpoint","title":"5.1.1 Generate Certificates Endpoint","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\GenerateCertificatesRequest;\nuse App\\Jobs\\GenerateCertificateJob;\nuse App\\Models\\CertificateBatch;\nuse App\\Services\\CertificateGenerationService;\nuse Illuminate\\Http\\JsonResponse;\n\nclass CertificateController extends Controller\n{\n    private CertificateGenerationService $certificateService;\n\n    public function __construct(CertificateGenerationService $certificateService)\n    {\n        $this-&gt;certificateService = $certificateService;\n        $this-&gt;middleware(['auth:saml', 'role:administrator,head_of_school,school_founder']);\n    }\n\n    /**\n     * Generate certificates for approved graduates\n     */\n    public function generate(GenerateCertificatesRequest $request): JsonResponse\n    {\n        $batchId = $request-&gt;validated()['batch_id'];\n        $batch = CertificateBatch::findOrFail($batchId);\n\n        // Verify batch is ready for certificate generation\n        if (!$batch-&gt;isReadyForCertificateGeneration()) {\n            return response()-&gt;json([\n                'success' =&gt; false,\n                'message' =&gt; 'Batch is not ready for certificate generation'\n            ], 400);\n        }\n\n        // Queue certificate generation jobs\n        $approvedGraduates = $batch-&gt;approvedGraduates;\n\n        foreach ($approvedGraduates as $graduate) {\n            GenerateCertificateJob::dispatch($graduate);\n        }\n\n        // Update batch status\n        $batch-&gt;update(['batch_status' =&gt; 'generating_certificates']);\n\n        return response()-&gt;json([\n            'success' =&gt; true,\n            'message' =&gt; 'Certificate generation started',\n            'batch_id' =&gt; $batchId,\n            'total_certificates' =&gt; $approvedGraduates-&gt;count()\n        ]);\n    }\n\n    /**\n     * Get certificate generation status\n     */\n    public function status(int $batchId): JsonResponse\n    {\n        $batch = CertificateBatch::with(['graduates.certificate'])-&gt;findOrFail($batchId);\n\n        $totalGraduates = $batch-&gt;graduates-&gt;count();\n        $generatedCertificates = $batch-&gt;graduates-&gt;whereNotNull('certificate')-&gt;count();\n\n        return response()-&gt;json([\n            'batch_id' =&gt; $batchId,\n            'batch_status' =&gt; $batch-&gt;batch_status,\n            'total_graduates' =&gt; $totalGraduates,\n            'generated_certificates' =&gt; $generatedCertificates,\n            'progress_percentage' =&gt; $totalGraduates &gt; 0 ? ($generatedCertificates / $totalGraduates) * 100 : 0\n        ]);\n    }\n\n    /**\n     * Download certificate\n     */\n    public function download(int $certificateId): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse\n    {\n        $certificate = Certificate::findOrFail($certificateId);\n\n        // Security check - ensure user can access this certificate\n        if (!$this-&gt;canAccessCertificate($certificate)) {\n            abort(403, 'Unauthorized access to certificate');\n        }\n\n        return response()-&gt;download(storage_path('app/' . $certificate-&gt;file_path));\n    }\n\n    /**\n     * Check if user can access certificate\n     */\n    private function canAccessCertificate(Certificate $certificate): bool\n    {\n        $user = auth()-&gt;user();\n\n        // Administrators and approvers can access all certificates\n        if (in_array($user-&gt;role, ['administrator', 'head_of_school', 'school_founder'])) {\n            return true;\n        }\n\n        return false;\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#512-certificate-verification-api","title":"5.1.2 Certificate Verification API","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Certificate;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\Request;\n\nclass VerificationController extends Controller\n{\n    /**\n     * Verify certificate by verification code\n     */\n    public function verify(Request $request): JsonResponse\n    {\n        $request-&gt;validate([\n            'verification_code' =&gt; 'required|string|size:8'\n        ]);\n\n        $certificate = Certificate::with('graduate')\n            -&gt;where('verification_code', strtoupper($request-&gt;verification_code))\n            -&gt;first();\n\n        if (!$certificate) {\n            return response()-&gt;json([\n                'success' =&gt; false,\n                'message' =&gt; 'Certificate not found or invalid verification code'\n            ], 404);\n        }\n\n        // Increment verification count\n        $certificate-&gt;incrementVerificationCount();\n\n        return response()-&gt;json([\n            'success' =&gt; true,\n            'certificate' =&gt; [\n                'certificate_number' =&gt; $certificate-&gt;certificate_number,\n                'graduate_name' =&gt; $certificate-&gt;graduate-&gt;name,\n                'department' =&gt; $certificate-&gt;graduate-&gt;department,\n                'graduation_date' =&gt; $certificate-&gt;graduate-&gt;graduation_date-&gt;format('Y-m-d'),\n                'generated_at' =&gt; $certificate-&gt;generated_at-&gt;format('Y-m-d H:i:s'),\n                'verification_count' =&gt; $certificate-&gt;verification_count,\n                'is_authentic' =&gt; true\n            ]\n        ]);\n    }\n\n    /**\n     * Get certificate verification statistics\n     */\n    public function statistics(): JsonResponse\n    {\n        $totalCertificates = Certificate::count();\n        $verifiedCertificates = Certificate::where('verification_count', '&gt;', 0)-&gt;count();\n        $totalVerifications = Certificate::sum('verification_count');\n\n        return response()-&gt;json([\n            'total_certificates' =&gt; $totalCertificates,\n            'verified_certificates' =&gt; $verifiedCertificates,\n            'total_verifications' =&gt; $totalVerifications,\n            'verification_rate' =&gt; $totalCertificates &gt; 0 ? ($verifiedCertificates / $totalCertificates) * 100 : 0\n        ]);\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#6-workflow-implementations","title":"6. Workflow Implementations","text":""},{"location":"certificate-automation/laravel-implementation-guide/#61-approval-workflow-service","title":"6.1 Approval Workflow Service","text":"<pre><code>&lt;?php\n\nnamespace App\\Services;\n\nuse App\\Events\\BatchApproved;\nuse App\\Jobs\\SendApprovalNotification;\nuse App\\Jobs\\SendIndividualApprovalNotification;\nuse App\\Jobs\\SendBatchApprovalNotification;\nuse App\\Jobs\\GenerateCertificateJob;\nuse App\\Models\\CertificateBatch;\nuse App\\Models\\Graduate;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass ApprovalWorkflowService\n{\n    /**\n     * Process individual head of school approval/rejection\n     */\n    public function processHeadApproval(Graduate $graduate, User $approver, string $action, ?string $comments = null): array\n    {\n        try {\n            DB::beginTransaction();\n\n            // Validate approver role\n            if (!$approver-&gt;isHeadOfSchool()) {\n                throw new \\Exception('User is not authorized to perform head approval');\n            }\n\n            // Validate graduate is in pending status\n            if ($graduate-&gt;approval_status !== 'pending') {\n                throw new \\Exception('Graduate is not in pending status for head approval');\n            }\n\n            // Update graduate record based on action\n            if ($action === 'approve') {\n                $graduate-&gt;update([\n                    'approval_status' =&gt; 'head_approved',\n                    'head_approval_date' =&gt; now(),\n                    'head_approved_by' =&gt; $approver-&gt;id,\n                    'head_approval_comments' =&gt; $comments,\n                ]);\n\n                // Send individual notification to founder for this specific graduate\n                $founder = User::where('role', 'school_founder')-&gt;first();\n                if ($founder) {\n                    SendIndividualApprovalNotification::dispatch($graduate, $founder, 'founder_approval');\n                }\n\n                $message = 'Graduate approved by Head of School and forwarded to Founder';\n            } else {\n                $graduate-&gt;update([\n                    'approval_status' =&gt; 'rejected_by_head',\n                    'head_approval_date' =&gt; now(),\n                    'head_approved_by' =&gt; $approver-&gt;id,\n                    'rejection_reason' =&gt; $comments ?? 'Rejected by Head of School',\n                ]);\n\n                $message = 'Graduate rejected by Head of School';\n            }\n\n            // Update batch status based on all graduates in batch\n            $graduate-&gt;batch-&gt;updateBatchStatus();\n\n            // Log approval action\n            Log::info('Head approval processed for individual graduate', [\n                'graduate_id' =&gt; $graduate-&gt;id,\n                'graduate_name' =&gt; $graduate-&gt;name,\n                'batch_id' =&gt; $graduate-&gt;certificate_batch_id,\n                'approver_id' =&gt; $approver-&gt;id,\n                'action' =&gt; $action,\n                'comments' =&gt; $comments\n            ]);\n\n            DB::commit();\n\n            return [\n                'success' =&gt; true,\n                'message' =&gt; $message,\n                'graduate_id' =&gt; $graduate-&gt;id,\n                'new_status' =&gt; $graduate-&gt;approval_status\n            ];\n\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            Log::error('Head approval failed for individual graduate', [\n                'graduate_id' =&gt; $graduate-&gt;id,\n                'error' =&gt; $e-&gt;getMessage()\n            ]);\n\n            return [\n                'success' =&gt; false,\n                'error' =&gt; $e-&gt;getMessage()\n            ];\n        }\n    }\n\n    /**\n     * Process individual founder approval/rejection\n     */\n    public function processFounderApproval(Graduate $graduate, User $approver, string $action, ?string $comments = null): array\n    {\n        try {\n            DB::beginTransaction();\n\n            // Validate approver role\n            if (!$approver-&gt;isSchoolFounder()) {\n                throw new \\Exception('User is not authorized to perform founder approval');\n            }\n\n            // Validate graduate is in head_approved status\n            if ($graduate-&gt;approval_status !== 'head_approved') {\n                throw new \\Exception('Graduate must be approved by Head of School first');\n            }\n\n            // Update graduate record based on action\n            if ($action === 'approve') {\n                $graduate-&gt;update([\n                    'approval_status' =&gt; 'final_approved',\n                    'founder_approval_date' =&gt; now(),\n                    'founder_approved_by' =&gt; $approver-&gt;id,\n                    'founder_approval_comments' =&gt; $comments,\n                ]);\n\n                // Trigger certificate generation for this individual graduate\n                GenerateCertificateJob::dispatch($graduate);\n\n                $message = 'Graduate finally approved by Founder - certificate generation initiated';\n            } else {\n                $graduate-&gt;update([\n                    'approval_status' =&gt; 'rejected_by_founder',\n                    'founder_approval_date' =&gt; now(),\n                    'founder_approved_by' =&gt; $approver-&gt;id,\n                    'rejection_reason' =&gt; $comments ?? 'Rejected by Founder',\n                ]);\n\n                $message = 'Graduate rejected by Founder';\n            }\n\n            // Update batch status based on all graduates in batch\n            $graduate-&gt;batch-&gt;updateBatchStatus();\n\n            // Log approval action\n            Log::info('Founder approval processed for individual graduate', [\n                'graduate_id' =&gt; $graduate-&gt;id,\n                'graduate_name' =&gt; $graduate-&gt;name,\n                'batch_id' =&gt; $graduate-&gt;certificate_batch_id,\n                'approver_id' =&gt; $approver-&gt;id,\n                'action' =&gt; $action,\n                'comments' =&gt; $comments\n            ]);\n\n            DB::commit();\n\n            return [\n                'success' =&gt; true,\n                'message' =&gt; $message,\n                'graduate_id' =&gt; $graduate-&gt;id,\n                'new_status' =&gt; $graduate-&gt;approval_status\n            ];\n\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            Log::error('Founder approval failed for individual graduate', [\n                'graduate_id' =&gt; $graduate-&gt;id,\n                'error' =&gt; $e-&gt;getMessage()\n            ]);\n\n            return [\n                'success' =&gt; false,\n                'error' =&gt; $e-&gt;getMessage()\n            ];\n        }\n    }\n\n    /**\n     * Send initial approval request to Head of School for entire batch\n     */\n    public function initiateApprovalProcess(CertificateBatch $batch): array\n    {\n        try {\n            // Update batch status to indicate approval process has started\n            $batch-&gt;update(['batch_status' =&gt; 'pending_head_approval']);\n\n            // Send email notification to Head of School with list of all graduates\n            $headOfSchool = User::where('role', 'head_of_school')-&gt;first();\n\n            Mail::to($headOfSchool-&gt;email)\n                -&gt;send(new BatchApprovalRequest($batch));\n\n            return [\n                'success' =&gt; true,\n                'message' =&gt; 'Approval request sent successfully'\n            ];\n        } catch (\\Exception $e) {\n            return [\n                'success' =&gt; false,\n                'error' =&gt; $e-&gt;getMessage()\n            ];\n        }\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#62-enhanced-csv-validation-and-batch-processing","title":"6.2 Enhanced CSV Validation and Batch Processing","text":""},{"location":"certificate-automation/laravel-implementation-guide/#621-csv-format-validation-service","title":"6.2.1 CSV Format Validation Service","text":"<pre><code>&lt;?php\n\nnamespace App\\Services;\n\nuse Illuminate\\Support\\Facades\\Log;\n\nclass CsvValidationService\n{\n    /**\n     * Validate CSV format matches required structure exactly\n     */\n    public function validateCsvFormat(array $data): void\n    {\n        if (empty($data)) {\n            throw new \\Exception('CSV file is empty');\n        }\n\n        // Required columns in exact order\n        $requiredColumns = ['Name', 'Department', 'GraduationDate', 'CertificateID'];\n        $firstRow = $data[0];\n        $actualColumns = array_keys($firstRow);\n\n        // Check if all required columns are present\n        $missingColumns = array_diff($requiredColumns, $actualColumns);\n        if (!empty($missingColumns)) {\n            throw new \\Exception('Missing required columns: ' . implode(', ', $missingColumns));\n        }\n\n        // Check for extra columns that are not allowed\n        $allowedColumns = ['Name', 'Department', 'GraduationDate', 'CertificateID'];\n        $extraColumns = array_diff($actualColumns, $allowedColumns);\n        if (!empty($extraColumns)) {\n            throw new \\Exception('Invalid columns found: ' . implode(', ', $extraColumns) . '. Only allowed columns: ' . implode(', ', $allowedColumns));\n        }\n\n        // Validate column order matches expected format exactly\n        if ($actualColumns !== $requiredColumns) {\n            throw new \\Exception('Columns must be in the exact order: ' . implode(', ', $requiredColumns) . '. Found: ' . implode(', ', $actualColumns));\n        }\n\n        // Validate data format for each row\n        foreach ($data as $index =&gt; $row) {\n            $this-&gt;validateRowFormat($row, $index + 1);\n        }\n\n        Log::info('CSV format validation passed', [\n            'columns' =&gt; $actualColumns,\n            'total_rows' =&gt; count($data)\n        ]);\n    }\n\n    /**\n     * Validate individual row format\n     */\n    private function validateRowFormat(array $row, int $rowNumber): void\n    {\n        // Validate Name\n        if (empty(trim($row['Name']))) {\n            throw new \\Exception(\"Row {$rowNumber}: Name cannot be empty\");\n        }\n\n        // Validate Department\n        $validDepartments = ['Flight Ops', 'Aviation Eng.'];\n        if (!in_array($row['Department'], $validDepartments)) {\n            throw new \\Exception(\"Row {$rowNumber}: Invalid department '{$row['Department']}'. Must be one of: \" . implode(', ', $validDepartments));\n        }\n\n        // Validate GraduationDate format (YYYY-MM-DD)\n        if (!preg_match('/^\\d{4}-\\d{2}-\\d{2}$/', $row['GraduationDate'])) {\n            throw new \\Exception(\"Row {$rowNumber}: Invalid graduation date format '{$row['GraduationDate']}'. Must be YYYY-MM-DD\");\n        }\n\n        // Validate CertificateID format (LAA2025-001)\n        if (!preg_match('/^LAA\\d{4}-\\d{3}$/', $row['CertificateID'])) {\n            throw new \\Exception(\"Row {$rowNumber}: Invalid certificate ID format '{$row['CertificateID']}'. Must be LAA2025-001 format\");\n        }\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#622-enhanced-processbulkupload-job","title":"6.2.2 Enhanced ProcessBulkUpload Job","text":"<pre><code>&lt;?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\CertificateBatch;\nuse App\\Models\\Graduate;\nuse App\\Services\\CsvValidationService;\nuse App\\Services\\EmailNotificationService;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\Storage;\n\nclass ProcessBulkUpload implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    private CertificateBatch $batch;\n    private string $csvFilePath;\n\n    public function __construct(CertificateBatch $batch, string $csvFilePath)\n    {\n        $this-&gt;batch = $batch;\n        $this-&gt;csvFilePath = $csvFilePath;\n    }\n\n    /**\n     * Execute the job with enhanced validation\n     */\n    public function handle(CsvValidationService $csvValidator, EmailNotificationService $emailService): void\n    {\n        try {\n            DB::beginTransaction();\n\n            // Step 1: Read CSV file\n            $csvData = $this-&gt;readCsvFile();\n\n            // Step 2: Validate CSV format (NEW REQUIREMENT)\n            $csvValidator-&gt;validateCsvFormat($csvData);\n\n            // Step 3: Validate CSV data content\n            $validatedData = $this-&gt;validateCsvData($csvData);\n\n            // Step 4: Create graduate records\n            $this-&gt;createGraduateRecords($validatedData);\n\n            // Step 5: Generate approval token and update batch\n            $approvalToken = $this-&gt;generateApprovalToken();\n            $this-&gt;batch-&gt;update([\n                'total_graduates' =&gt; count($validatedData),\n                'batch_status' =&gt; 'validated_pending_head_approval',\n                'head_approval_token' =&gt; $approvalToken,\n                'head_approval_submitted' =&gt; false\n            ]);\n\n            // Step 6: Send approval email to Head of School with web link\n            $headOfSchool = \\App\\Models\\User::where('role', 'head_of_school')-&gt;first();\n            if ($headOfSchool) {\n                $emailService-&gt;sendBatchApprovalNotification($this-&gt;batch, $headOfSchool, 'head_approval');\n            }\n\n            DB::commit();\n\n            Log::info('Bulk upload processed and validated successfully', [\n                'batch_id' =&gt; $this-&gt;batch-&gt;id,\n                'total_graduates' =&gt; count($validatedData),\n                'approval_token' =&gt; $approvalToken\n            ]);\n\n        } catch (\\Exception $e) {\n            DB::rollBack();\n\n            $this-&gt;batch-&gt;update(['batch_status' =&gt; 'validation_failed']);\n\n            Log::error('Bulk upload processing failed', [\n                'batch_id' =&gt; $this-&gt;batch-&gt;id,\n                'error' =&gt; $e-&gt;getMessage()\n            ]);\n\n            throw $e;\n        }\n    }\n\n    /**\n     * Read CSV file\n     */\n    private function readCsvFile(): array\n    {\n        $csvContent = Storage::get($this-&gt;csvFilePath);\n        $lines = explode(\"\\n\", $csvContent);\n        $header = str_getcsv(array_shift($lines));\n\n        $data = [];\n        foreach ($lines as $line) {\n            if (trim($line)) {\n                $data[] = array_combine($header, str_getcsv($line));\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * Validate CSV data content\n     */\n    private function validateCsvData(array $data): array\n    {\n        $validatedData = [];\n\n        foreach ($data as $index =&gt; $row) {\n            // Validate email format if provided\n            if (!empty($row['Email']) &amp;&amp; !filter_var($row['Email'], FILTER_VALIDATE_EMAIL)) {\n                throw new \\Exception(\"Invalid email format at row \" . ($index + 2));\n            }\n\n            // Check for duplicate certificate IDs\n            $existingGraduate = Graduate::where('certificate_id', $row['CertificateID'])-&gt;first();\n            if ($existingGraduate) {\n                throw new \\Exception(\"Duplicate certificate ID '{$row['CertificateID']}' at row \" . ($index + 2));\n            }\n\n            $validatedData[] = $row;\n        }\n\n        return $validatedData;\n    }\n\n    /**\n     * Create graduate records\n     */\n    private function createGraduateRecords(array $data): void\n    {\n        foreach ($data as $row) {\n            Graduate::create([\n                'certificate_batch_id' =&gt; $this-&gt;batch-&gt;id,\n                'name' =&gt; $row['Name'],\n                'email' =&gt; $row['Email'] ?? null,\n                'department' =&gt; $row['Department'],\n                'graduation_date' =&gt; $row['GraduationDate'],\n                'certificate_id' =&gt; $row['CertificateID'],\n                'approval_status' =&gt; 'pending',\n            ]);\n        }\n    }\n\n    /**\n     * Generate unique approval token for this batch\n     */\n    private function generateApprovalToken(): string\n    {\n        return hash('sha256', $this-&gt;batch-&gt;id . now()-&gt;timestamp . uniqid());\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#63-web-based-approval-system","title":"6.3 Web-Based Approval System","text":""},{"location":"certificate-automation/laravel-implementation-guide/#631-approval-web-controller","title":"6.3.1 Approval Web Controller","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\CertificateBatch;\nuse App\\Models\\Graduate;\nuse App\\Services\\ApprovalWorkflowService;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass WebApprovalController extends Controller\n{\n    private ApprovalWorkflowService $approvalService;\n\n    public function __construct(ApprovalWorkflowService $approvalService)\n    {\n        $this-&gt;approvalService = $approvalService;\n    }\n\n    /**\n     * Display Head of School approval page\n     */\n    public function showHeadApprovalPage(Request $request, string $token)\n    {\n        $batch = CertificateBatch::where('head_approval_token', $token)-&gt;first();\n\n        if (!$batch) {\n            return view('approval.invalid-token');\n        }\n\n        if ($batch-&gt;head_approval_submitted) {\n            return view('approval.already-submitted', ['batch' =&gt; $batch]);\n        }\n\n        $graduates = $batch-&gt;graduates()-&gt;where('approval_status', 'pending')-&gt;get();\n\n        return view('approval.head-approval', [\n            'batch' =&gt; $batch,\n            'graduates' =&gt; $graduates,\n            'token' =&gt; $token\n        ]);\n    }\n\n    /**\n     * Process Head of School approval submission\n     */\n    public function processHeadApproval(Request $request, string $token)\n    {\n        $batch = CertificateBatch::where('head_approval_token', $token)-&gt;first();\n\n        if (!$batch || $batch-&gt;head_approval_submitted) {\n            return response()-&gt;json(['success' =&gt; false, 'message' =&gt; 'Invalid or expired approval link'], 400);\n        }\n\n        $request-&gt;validate([\n            'approvals' =&gt; 'required|array',\n            'approvals.*' =&gt; 'required|in:approve,reject',\n            'comments' =&gt; 'array',\n            'comments.*' =&gt; 'nullable|string|max:500'\n        ]);\n\n        try {\n            DB::beginTransaction();\n\n            $approvedCount = 0;\n            $rejectedCount = 0;\n            $founderApprovalTokens = [];\n\n            foreach ($request-&gt;approvals as $graduateId =&gt; $action) {\n                $graduate = Graduate::findOrFail($graduateId);\n                $comments = $request-&gt;comments[$graduateId] ?? null;\n\n                if ($action === 'approve') {\n                    $graduate-&gt;update([\n                        'approval_status' =&gt; 'head_approved',\n                        'head_approval_date' =&gt; now(),\n                        'head_approved_by' =&gt; 1, // System user for web approvals\n                        'head_approval_comments' =&gt; $comments,\n                    ]);\n\n                    // Generate founder approval token for this graduate\n                    $founderToken = $this-&gt;generateFounderApprovalToken($graduate);\n                    $graduate-&gt;update(['founder_approval_token' =&gt; $founderToken]);\n                    $founderApprovalTokens[] = ['graduate' =&gt; $graduate, 'token' =&gt; $founderToken];\n\n                    $approvedCount++;\n                } else {\n                    $graduate-&gt;update([\n                        'approval_status' =&gt; 'rejected_by_head',\n                        'head_approval_date' =&gt; now(),\n                        'head_approved_by' =&gt; 1,\n                        'rejection_reason' =&gt; $comments ?? 'Rejected by Head of School',\n                    ]);\n\n                    $rejectedCount++;\n                }\n            }\n\n            // Mark batch as submitted\n            $batch-&gt;update(['head_approval_submitted' =&gt; true]);\n\n            // Send individual approval emails to Founder for approved graduates\n            $founder = \\App\\Models\\User::where('role', 'school_founder')-&gt;first();\n            if ($founder) {\n                foreach ($founderApprovalTokens as $tokenData) {\n                    SendFounderApprovalNotification::dispatch($tokenData['graduate'], $founder, $tokenData['token']);\n                }\n            }\n\n            DB::commit();\n\n            Log::info('Head approval processed via web interface', [\n                'batch_id' =&gt; $batch-&gt;id,\n                'approved_count' =&gt; $approvedCount,\n                'rejected_count' =&gt; $rejectedCount\n            ]);\n\n            return response()-&gt;json([\n                'success' =&gt; true,\n                'message' =&gt; \"Processed {$approvedCount} approvals and {$rejectedCount} rejections\",\n                'approved_count' =&gt; $approvedCount,\n                'rejected_count' =&gt; $rejectedCount\n            ]);\n\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            Log::error('Head approval processing failed', ['error' =&gt; $e-&gt;getMessage()]);\n\n            return response()-&gt;json([\n                'success' =&gt; false,\n                'message' =&gt; 'Processing failed: ' . $e-&gt;getMessage()\n            ], 500);\n        }\n    }\n\n    /**\n     * Display Founder approval page\n     */\n    public function showFounderApprovalPage(Request $request, string $token)\n    {\n        $graduate = Graduate::where('founder_approval_token', $token)-&gt;first();\n\n        if (!$graduate) {\n            return view('approval.invalid-token');\n        }\n\n        if ($graduate-&gt;founder_approval_submitted) {\n            return view('approval.already-submitted', ['graduate' =&gt; $graduate]);\n        }\n\n        return view('approval.founder-approval', [\n            'graduate' =&gt; $graduate,\n            'batch' =&gt; $graduate-&gt;batch,\n            'token' =&gt; $token\n        ]);\n    }\n\n    /**\n     * Process Founder approval submission\n     */\n    public function processFounderApproval(Request $request, string $token)\n    {\n        $graduate = Graduate::where('founder_approval_token', $token)-&gt;first();\n\n        if (!$graduate || $graduate-&gt;founder_approval_submitted) {\n            return response()-&gt;json(['success' =&gt; false, 'message' =&gt; 'Invalid or expired approval link'], 400);\n        }\n\n        $request-&gt;validate([\n            'action' =&gt; 'required|in:approve,reject',\n            'comments' =&gt; 'nullable|string|max:500'\n        ]);\n\n        try {\n            DB::beginTransaction();\n\n            if ($request-&gt;action === 'approve') {\n                $graduate-&gt;update([\n                    'approval_status' =&gt; 'final_approved',\n                    'founder_approval_date' =&gt; now(),\n                    'founder_approved_by' =&gt; 1, // System user for web approvals\n                    'founder_approval_comments' =&gt; $request-&gt;comments,\n                    'founder_approval_submitted' =&gt; true\n                ]);\n\n                // Trigger certificate generation\n                GenerateCertificateJob::dispatch($graduate);\n\n                $message = 'Graduate approved - certificate generation initiated';\n            } else {\n                $graduate-&gt;update([\n                    'approval_status' =&gt; 'rejected_by_founder',\n                    'founder_approval_date' =&gt; now(),\n                    'founder_approved_by' =&gt; 1,\n                    'rejection_reason' =&gt; $request-&gt;comments ?? 'Rejected by Founder',\n                    'founder_approval_submitted' =&gt; true\n                ]);\n\n                $message = 'Graduate rejected';\n            }\n\n            DB::commit();\n\n            Log::info('Founder approval processed via web interface', [\n                'graduate_id' =&gt; $graduate-&gt;id,\n                'action' =&gt; $request-&gt;action,\n                'comments' =&gt; $request-&gt;comments\n            ]);\n\n            return response()-&gt;json([\n                'success' =&gt; true,\n                'message' =&gt; $message,\n                'graduate_name' =&gt; $graduate-&gt;name,\n                'new_status' =&gt; $graduate-&gt;approval_status\n            ]);\n\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            Log::error('Founder approval processing failed', ['error' =&gt; $e-&gt;getMessage()]);\n\n            return response()-&gt;json([\n                'success' =&gt; false,\n                'message' =&gt; 'Processing failed: ' . $e-&gt;getMessage()\n            ], 500);\n        }\n    }\n\n    /**\n     * Generate founder approval token for individual graduate\n     */\n    private function generateFounderApprovalToken(Graduate $graduate): string\n    {\n        return hash('sha256', $graduate-&gt;id . 'founder' . now()-&gt;timestamp . uniqid());\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#632-enhanced-email-notification-service","title":"6.3.2 Enhanced Email Notification Service","text":"<pre><code>&lt;?php\n\nnamespace App\\Services;\n\nuse App\\Models\\CertificateBatch;\nuse App\\Models\\Graduate;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass EmailNotificationService\n{\n    /**\n     * Send batch approval notification to Head of School with web link\n     */\n    public function sendBatchApprovalNotification(CertificateBatch $batch, User $approver, string $type): void\n    {\n        $approvalUrl = route('web-approval.head', ['token' =&gt; $batch-&gt;head_approval_token]);\n\n        $emailData = [\n            'approver_name' =&gt; $approver-&gt;name,\n            'batch_name' =&gt; $batch-&gt;batch_name,\n            'department' =&gt; $batch-&gt;department,\n            'graduation_date' =&gt; $batch-&gt;graduation_date-&gt;format('F j, Y'),\n            'total_graduates' =&gt; $batch-&gt;total_graduates,\n            'approval_url' =&gt; $approvalUrl,\n            'graduates' =&gt; $batch-&gt;graduates-&gt;map(function ($graduate) {\n                return [\n                    'id' =&gt; $graduate-&gt;id,\n                    'name' =&gt; $graduate-&gt;name,\n                    'department' =&gt; $graduate-&gt;department,\n                    'certificate_id' =&gt; $graduate-&gt;certificate_id,\n                ];\n            })\n        ];\n\n        Mail::send('emails.batch-approval-web', $emailData, function ($message) use ($approver, $batch) {\n            $message-&gt;to($approver-&gt;email, $approver-&gt;name)\n                -&gt;subject(\"Certificate Approval Required: {$batch-&gt;batch_name}\")\n                -&gt;from(config('mail.from.address'), config('mail.from.name'));\n        });\n\n        Log::info('Batch approval email sent with web link', [\n            'batch_id' =&gt; $batch-&gt;id,\n            'approver_email' =&gt; $approver-&gt;email,\n            'approval_url' =&gt; $approvalUrl\n        ]);\n    }\n\n    /**\n     * Send individual founder approval notification with web link\n     */\n    public function sendFounderApprovalNotification(Graduate $graduate, User $founder, string $token): void\n    {\n        $approvalUrl = route('web-approval.founder', ['token' =&gt; $token]);\n\n        $emailData = [\n            'founder_name' =&gt; $founder-&gt;name,\n            'graduate_name' =&gt; $graduate-&gt;name,\n            'graduate_id' =&gt; $graduate-&gt;id,\n            'department' =&gt; $graduate-&gt;department,\n            'graduation_date' =&gt; $graduate-&gt;graduation_date-&gt;format('F j, Y'),\n            'certificate_id' =&gt; $graduate-&gt;certificate_id,\n            'batch_name' =&gt; $graduate-&gt;batch-&gt;batch_name,\n            'approval_url' =&gt; $approvalUrl,\n            'head_approval_date' =&gt; $graduate-&gt;head_approval_date-&gt;format('F j, Y g:i A'),\n            'head_approval_comments' =&gt; $graduate-&gt;head_approval_comments,\n        ];\n\n        Mail::send('emails.founder-approval-web', $emailData, function ($message) use ($founder, $graduate) {\n            $message-&gt;to($founder-&gt;email, $founder-&gt;name)\n                -&gt;subject(\"Final Approval Required: {$graduate-&gt;name}\")\n                -&gt;from(config('mail.from.address'), config('mail.from.name'));\n        });\n\n        Log::info('Founder approval email sent with web link', [\n            'graduate_id' =&gt; $graduate-&gt;id,\n            'founder_email' =&gt; $founder-&gt;email,\n            'approval_url' =&gt; $approvalUrl\n        ]);\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#633-send-founder-approval-notification-job","title":"6.3.3 Send Founder Approval Notification Job","text":"<pre><code>&lt;?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\Graduate;\nuse App\\Models\\User;\nuse App\\Services\\EmailNotificationService;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass SendFounderApprovalNotification implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    public $tries = 3;\n    public $timeout = 60;\n\n    private Graduate $graduate;\n    private User $founder;\n    private string $token;\n\n    public function __construct(Graduate $graduate, User $founder, string $token)\n    {\n        $this-&gt;graduate = $graduate;\n        $this-&gt;founder = $founder;\n        $this-&gt;token = $token;\n        $this-&gt;onQueue('notifications');\n    }\n\n    /**\n     * Execute the job\n     */\n    public function handle(EmailNotificationService $emailService): void\n    {\n        $emailService-&gt;sendFounderApprovalNotification($this-&gt;graduate, $this-&gt;founder, $this-&gt;token);\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#63-individual-approval-job-classes","title":"6.3 Individual Approval Job Classes","text":""},{"location":"certificate-automation/laravel-implementation-guide/#631-send-individual-approval-notification-job","title":"6.3.1 Send Individual Approval Notification Job","text":"<pre><code>&lt;?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\Graduate;\nuse App\\Models\\User;\nuse App\\Services\\EmailNotificationService;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass SendIndividualApprovalNotification implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    public $tries = 3;\n    public $timeout = 60;\n\n    private Graduate $graduate;\n    private User $approver;\n    private string $notificationType;\n\n    public function __construct(Graduate $graduate, User $approver, string $notificationType)\n    {\n        $this-&gt;graduate = $graduate;\n        $this-&gt;approver = $approver;\n        $this-&gt;notificationType = $notificationType;\n        $this-&gt;onQueue('notifications');\n    }\n\n    /**\n     * Execute the job\n     */\n    public function handle(EmailNotificationService $emailService): void\n    {\n        try {\n            $emailService-&gt;sendIndividualApprovalNotification(\n                $this-&gt;graduate,\n                $this-&gt;approver,\n                $this-&gt;notificationType\n            );\n\n            Log::info('Individual approval notification sent', [\n                'graduate_id' =&gt; $this-&gt;graduate-&gt;id,\n                'graduate_name' =&gt; $this-&gt;graduate-&gt;name,\n                'approver_email' =&gt; $this-&gt;approver-&gt;email,\n                'notification_type' =&gt; $this-&gt;notificationType\n            ]);\n\n        } catch (\\Exception $e) {\n            Log::error('Failed to send individual approval notification', [\n                'graduate_id' =&gt; $this-&gt;graduate-&gt;id,\n                'approver_email' =&gt; $this-&gt;approver-&gt;email,\n                'error' =&gt; $e-&gt;getMessage()\n            ]);\n\n            throw $e;\n        }\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#632-send-batch-approval-notification-job","title":"6.3.2 Send Batch Approval Notification Job","text":"<pre><code>&lt;?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\CertificateBatch;\nuse App\\Models\\User;\nuse App\\Services\\EmailNotificationService;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass SendBatchApprovalNotification implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    public $tries = 3;\n    public $timeout = 60;\n\n    private CertificateBatch $batch;\n    private User $approver;\n    private string $notificationType;\n\n    public function __construct(CertificateBatch $batch, User $approver, string $notificationType)\n    {\n        $this-&gt;batch = $batch;\n        $this-&gt;approver = $approver;\n        $this-&gt;notificationType = $notificationType;\n        $this-&gt;onQueue('notifications');\n    }\n\n    /**\n     * Execute the job\n     */\n    public function handle(EmailNotificationService $emailService): void\n    {\n        try {\n            $emailService-&gt;sendBatchApprovalNotification(\n                $this-&gt;batch,\n                $this-&gt;approver,\n                $this-&gt;notificationType\n            );\n\n            Log::info('Batch approval notification sent', [\n                'batch_id' =&gt; $this-&gt;batch-&gt;id,\n                'batch_name' =&gt; $this-&gt;batch-&gt;batch_name,\n                'approver_email' =&gt; $this-&gt;approver-&gt;email,\n                'notification_type' =&gt; $this-&gt;notificationType,\n                'total_graduates' =&gt; $this-&gt;batch-&gt;total_graduates\n            ]);\n\n        } catch (\\Exception $e) {\n            Log::error('Failed to send batch approval notification', [\n                'batch_id' =&gt; $this-&gt;batch-&gt;id,\n                'approver_email' =&gt; $this-&gt;approver-&gt;email,\n                'error' =&gt; $e-&gt;getMessage()\n            ]);\n\n            throw $e;\n        }\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#64-individual-approval-api-controllers","title":"6.4 Individual Approval API Controllers","text":""},{"location":"certificate-automation/laravel-implementation-guide/#641-individual-approval-controller","title":"6.4.1 Individual Approval Controller","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests\\IndividualApprovalRequest;\nuse App\\Models\\Graduate;\nuse App\\Services\\ApprovalWorkflowService;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass IndividualApprovalController extends Controller\n{\n    private ApprovalWorkflowService $approvalService;\n\n    public function __construct(ApprovalWorkflowService $approvalService)\n    {\n        $this-&gt;approvalService = $approvalService;\n        $this-&gt;middleware(['auth:saml', 'role:head_of_school,school_founder']);\n    }\n\n    /**\n     * Process head of school approval for individual graduate\n     */\n    public function processHeadApproval(IndividualApprovalRequest $request, Graduate $graduate): JsonResponse\n    {\n        $user = Auth::user();\n\n        if (!$user-&gt;isHeadOfSchool()) {\n            return response()-&gt;json([\n                'success' =&gt; false,\n\n### 6.4 Web Routes for Approval System\n\n```php\n&lt;?php\n\n// routes/web.php\n\nuse App\\Http\\Controllers\\WebApprovalController;\nuse Illuminate\\Support\\Facades\\Route;\n\n// Web-based approval routes (no authentication required - token-based)\nRoute::prefix('approval')-&gt;name('web-approval.')-&gt;group(function () {\n\n    // Head of School approval routes\n    Route::get('head/{token}', [WebApprovalController::class, 'showHeadApprovalPage'])\n        -&gt;name('head');\n\n    Route::post('head/{token}', [WebApprovalController::class, 'processHeadApproval'])\n        -&gt;name('head.process');\n\n    // Founder approval routes  \n    Route::get('founder/{token}', [WebApprovalController::class, 'showFounderApprovalPage'])\n        -&gt;name('founder');\n\n    Route::post('founder/{token}', [WebApprovalController::class, 'processFounderApproval'])\n        -&gt;name('founder.process');\n});\n\n// Public certificate verification (no authentication required)\nRoute::prefix('verify')-&gt;group(function () {\n    Route::get('certificate/{code}', [VerificationController::class, 'showVerificationPage'])\n        -&gt;name('certificate.verify.page');\n\n    Route::post('certificate', [VerificationController::class, 'verify'])\n        -&gt;name('certificate.verify');\n});\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#65-blade-templates-for-web-approval","title":"6.5 Blade Templates for Web Approval","text":""},{"location":"certificate-automation/laravel-implementation-guide/#651-head-of-school-approval-template","title":"6.5.1 Head of School Approval Template","text":"<pre><code>{{-- resources/views/approval/head-approval.blade.php --}}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Certificate Approval - Head of School&lt;/title&gt;\n    &lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #007bff; }\n        .batch-info { background: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 30px; }\n        .graduates-table { width: 100%; border-collapse: collapse; margin-bottom: 30px; }\n        .graduates-table th, .graduates-table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }\n        .graduates-table th { background-color: #007bff; color: white; }\n        .approval-controls { text-align: center; }\n        .btn { padding: 10px 20px; margin: 5px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; }\n        .btn-primary { background-color: #007bff; color: white; }\n        .btn-success { background-color: #28a745; color: white; }\n        .btn-danger { background-color: #dc3545; color: white; }\n        .btn-secondary { background-color: #6c757d; color: white; }\n        .comments-input { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }\n        .select-all-controls { margin-bottom: 20px; padding: 15px; background: #e9ecef; border-radius: 5px; }\n        .status-message { padding: 15px; margin: 10px 0; border-radius: 4px; }\n        .status-success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }\n        .status-error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"header\"&gt;\n            &lt;h1&gt;Certificate Approval Required&lt;/h1&gt;\n            &lt;h2&gt;Head of School Review&lt;/h2&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"batch-info\"&gt;\n            &lt;h3&gt;Batch Information&lt;/h3&gt;\n            &lt;p&gt;&lt;strong&gt;Batch Name:&lt;/strong&gt; {{ $batch-&gt;batch_name }}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Department:&lt;/strong&gt; {{ $batch-&gt;department }}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Graduation Date:&lt;/strong&gt; {{ $batch-&gt;graduation_date-&gt;format('F j, Y') }}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Total Graduates:&lt;/strong&gt; {{ $batch-&gt;total_graduates }}&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div id=\"status-message\" class=\"status-message\" style=\"display: none;\"&gt;&lt;/div&gt;\n\n        &lt;form id=\"approval-form\"&gt;\n            &lt;div class=\"select-all-controls\"&gt;\n                &lt;h4&gt;Bulk Actions:&lt;/h4&gt;\n                &lt;button type=\"button\" class=\"btn btn-success\" onclick=\"selectAllApprove()\"&gt;Approve All&lt;/button&gt;\n                &lt;button type=\"button\" class=\"btn btn-danger\" onclick=\"selectAllReject()\"&gt;Reject All&lt;/button&gt;\n                &lt;button type=\"button\" class=\"btn btn-secondary\" onclick=\"clearAll()\"&gt;Clear All&lt;/button&gt;\n            &lt;/div&gt;\n\n            &lt;table class=\"graduates-table\"&gt;\n                &lt;thead&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Name&lt;/th&gt;\n                        &lt;th&gt;Department&lt;/th&gt;\n                        &lt;th&gt;Certificate ID&lt;/th&gt;\n                        &lt;th&gt;Action&lt;/th&gt;\n                        &lt;th&gt;Comments&lt;/th&gt;\n                    &lt;/tr&gt;\n                &lt;/thead&gt;\n                &lt;tbody&gt;\n                    @foreach($graduates as $graduate)\n                    &lt;tr&gt;\n                        &lt;td&gt;{{ $graduate-&gt;name }}&lt;/td&gt;\n                        &lt;td&gt;{{ $graduate-&gt;department }}&lt;/td&gt;\n                        &lt;td&gt;{{ $graduate-&gt;certificate_id }}&lt;/td&gt;\n                        &lt;td&gt;\n                            &lt;label&gt;\n                                &lt;input type=\"radio\" name=\"approvals[{{ $graduate-&gt;id }}]\" value=\"approve\"&gt; Approve\n                            &lt;/label&gt;\n                            &lt;label style=\"margin-left: 15px;\"&gt;\n                                &lt;input type=\"radio\" name=\"approvals[{{ $graduate-&gt;id }}]\" value=\"reject\"&gt; Reject\n                            &lt;/label&gt;\n                        &lt;/td&gt;\n                        &lt;td&gt;\n                            &lt;input type=\"text\" name=\"comments[{{ $graduate-&gt;id }}]\" class=\"comments-input\" placeholder=\"Optional comments...\" maxlength=\"500\"&gt;\n                        &lt;/td&gt;\n                    &lt;/tr&gt;\n                    @endforeach\n                &lt;/tbody&gt;\n            &lt;/table&gt;\n\n            &lt;div class=\"approval-controls\"&gt;\n                &lt;button type=\"submit\" class=\"btn btn-primary\" style=\"font-size: 16px; padding: 15px 30px;\"&gt;\n                    Submit Approvals\n                &lt;/button&gt;\n                &lt;p style=\"margin-top: 15px; color: #666; font-style: italic;\"&gt;\n                    Note: This form can only be submitted once. Please review all decisions carefully.\n                &lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        // Set up CSRF token for AJAX requests\n        const token = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n\n        function selectAllApprove() {\n            document.querySelectorAll('input[type=\"radio\"][value=\"approve\"]').forEach(radio =&gt; {\n                radio.checked = true;\n            });\n        }\n\n        function selectAllReject() {\n            document.querySelectorAll('input[type=\"radio\"][value=\"reject\"]').forEach(radio =&gt; {\n                radio.checked = true;\n            });\n        }\n\n        function clearAll() {\n            document.querySelectorAll('input[type=\"radio\"]').forEach(radio =&gt; {\n                radio.checked = false;\n            });\n        }\n\n        function showMessage(message, isError = false) {\n            const messageDiv = document.getElementById('status-message');\n            messageDiv.textContent = message;\n            messageDiv.className = 'status-message ' + (isError ? 'status-error' : 'status-success');\n            messageDiv.style.display = 'block';\n            messageDiv.scrollIntoView({ behavior: 'smooth' });\n        }\n\n        document.getElementById('approval-form').addEventListener('submit', function(e) {\n            e.preventDefault();\n\n            const formData = new FormData(this);\n            const approvals = {};\n            const comments = {};\n\n            // Collect approval decisions\n            document.querySelectorAll('input[type=\"radio\"]:checked').forEach(radio =&gt; {\n                const match = radio.name.match(/approvals\\[(\\d+)\\]/);\n                if (match) {\n                    approvals[match[1]] = radio.value;\n                }\n            });\n\n            // Collect comments\n            document.querySelectorAll('input[name^=\"comments\"]').forEach(input =&gt; {\n                const match = input.name.match(/comments\\[(\\d+)\\]/);\n                if (match &amp;&amp; input.value.trim()) {\n                    comments[match[1]] = input.value.trim();\n                }\n            });\n\n            // Validate that all graduates have decisions\n            const totalGraduates = {{ $graduates-&gt;count() }};\n            if (Object.keys(approvals).length !== totalGraduates) {\n                showMessage('Please make a decision (approve or reject) for all graduates.', true);\n                return;\n            }\n\n            // Disable form to prevent double submission\n            const submitBtn = this.querySelector('button[type=\"submit\"]');\n            submitBtn.disabled = true;\n            submitBtn.textContent = 'Processing...';\n\n            // Submit via AJAX\n            fetch('{{ route(\"web-approval.head.process\", [\"token\" =&gt; $token]) }}', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRF-TOKEN': token\n                },\n                body: JSON.stringify({\n                    approvals: approvals,\n                    comments: comments\n                })\n            })\n            .then(response =&gt; response.json())\n            .then(data =&gt; {\n                if (data.success) {\n                    showMessage(`Success! ${data.message}. The Founder will receive individual approval emails for approved graduates.`);\n                    // Hide form after successful submission\n                    document.getElementById('approval-form').style.display = 'none';\n                } else {\n                    showMessage('Error: ' + data.message, true);\n                    submitBtn.disabled = false;\n                    submitBtn.textContent = 'Submit Approvals';\n                }\n            })\n            .catch(error =&gt; {\n                showMessage('Network error occurred. Please try again.', true);\n                submitBtn.disabled = false;\n                submitBtn.textContent = 'Submit Approvals';\n            });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#652-founder-approval-template","title":"6.5.2 Founder Approval Template","text":"<pre><code>{{-- resources/views/approval/founder-approval.blade.php --}}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Final Certificate Approval - School Founder&lt;/title&gt;\n    &lt;meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"&gt;\n    &lt;style&gt;\n        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }\n        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        .header { text-align: center; margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #28a745; }\n        .graduate-info { background: #f8f9fa; padding: 20px; border-radius: 5px; margin-bottom: 30px; }\n        .approval-history { background: #e9ecef; padding: 15px; border-radius: 5px; margin-bottom: 30px; }\n        .approval-controls { text-align: center; margin-top: 30px; }\n        .btn { padding: 12px 25px; margin: 10px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; }\n        .btn-success { background-color: #28a745; color: white; }\n        .btn-danger { background-color: #dc3545; color: white; }\n        .comments-textarea { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; margin: 15px 0; }\n        .status-message { padding: 15px; margin: 10px 0; border-radius: 4px; }\n        .status-success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }\n        .status-error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;div class=\"header\"&gt;\n            &lt;h1&gt;Final Certificate Approval&lt;/h1&gt;\n            &lt;h2&gt;School Founder Review&lt;/h2&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"graduate-info\"&gt;\n            &lt;h3&gt;Graduate Information&lt;/h3&gt;\n            &lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; {{ $graduate-&gt;name }}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Department:&lt;/strong&gt; {{ $graduate-&gt;department }}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Certificate ID:&lt;/strong&gt; {{ $graduate-&gt;certificate_id }}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Graduation Date:&lt;/strong&gt; {{ $graduate-&gt;graduation_date-&gt;format('F j, Y') }}&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;Batch:&lt;/strong&gt; {{ $batch-&gt;batch_name }}&lt;/p&gt;\n        &lt;/div&gt;\n\n        &lt;div class=\"approval-history\"&gt;\n            &lt;h4&gt;Head of School Approval&lt;/h4&gt;\n            &lt;p&gt;&lt;strong&gt;Approved on:&lt;/strong&gt; {{ $graduate-&gt;head_approval_date-&gt;format('F j, Y g:i A') }}&lt;/p&gt;\n            @if($graduate-&gt;head_approval_comments)\n                &lt;p&gt;&lt;strong&gt;Comments:&lt;/strong&gt; {{ $graduate-&gt;head_approval_comments }}&lt;/p&gt;\n            @endif\n        &lt;/div&gt;\n\n        &lt;div id=\"status-message\" class=\"status-message\" style=\"display: none;\"&gt;&lt;/div&gt;\n\n        &lt;form id=\"founder-approval-form\"&gt;\n            &lt;div style=\"text-align: center; margin: 30px 0;\"&gt;\n                &lt;h4&gt;Your Decision:&lt;/h4&gt;\n                &lt;label style=\"margin-right: 30px;\"&gt;\n                    &lt;input type=\"radio\" name=\"action\" value=\"approve\" style=\"margin-right: 8px;\"&gt; \n                    &lt;strong&gt;Approve&lt;/strong&gt; - Generate certificate\n                &lt;/label&gt;\n                &lt;label&gt;\n                    &lt;input type=\"radio\" name=\"action\" value=\"reject\" style=\"margin-right: 8px;\"&gt; \n                    &lt;strong&gt;Reject&lt;/strong&gt; - Do not generate certificate\n                &lt;/label&gt;\n            &lt;/div&gt;\n\n            &lt;div&gt;\n                &lt;label for=\"comments\"&gt;&lt;strong&gt;Comments (Optional):&lt;/strong&gt;&lt;/label&gt;\n                &lt;textarea name=\"comments\" id=\"comments\" class=\"comments-textarea\" rows=\"4\" placeholder=\"Add any comments about your decision...\" maxlength=\"500\"&gt;&lt;/textarea&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"approval-controls\"&gt;\n                &lt;button type=\"submit\" class=\"btn btn-success\" style=\"font-size: 18px; padding: 15px 40px;\"&gt;\n                    Submit Final Decision\n                &lt;/button&gt;\n                &lt;p style=\"margin-top: 15px; color: #666; font-style: italic;\"&gt;\n                    Note: This decision is final and cannot be changed.\n                &lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        const token = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n\n        function showMessage(message, isError = false) {\n            const messageDiv = document.getElementById('status-message');\n            messageDiv.textContent = message;\n            messageDiv.className = 'status-message ' + (isError ? 'status-error' : 'status-success');\n            messageDiv.style.display = 'block';\n            messageDiv.scrollIntoView({ behavior: 'smooth' });\n        }\n\n        document.getElementById('founder-approval-form').addEventListener('submit', function(e) {\n            e.preventDefault();\n\n            const formData = new FormData(this);\n            const action = formData.get('action');\n            const comments = formData.get('comments');\n\n            if (!action) {\n                showMessage('Please select either Approve or Reject.', true);\n                return;\n            }\n\n            // Disable form to prevent double submission\n            const submitBtn = this.querySelector('button[type=\"submit\"]');\n            submitBtn.disabled = true;\n            submitBtn.textContent = 'Processing...';\n\n            // Submit via AJAX\n            fetch('{{ route(\"web-approval.founder.process\", [\"token\" =&gt; $token]) }}', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRF-TOKEN': token\n                },\n                body: JSON.stringify({\n                    action: action,\n                    comments: comments\n                })\n            })\n            .then(response =&gt; response.json())\n            .then(data =&gt; {\n                if (data.success) {\n                    showMessage(`Success! ${data.message}`);\n                    // Hide form after successful submission\n                    document.getElementById('founder-approval-form').style.display = 'none';\n                } else {\n                    showMessage('Error: ' + data.message, true);\n                    submitBtn.disabled = false;\n                    submitBtn.textContent = 'Submit Final Decision';\n                }\n            })\n            .catch(error =&gt; {\n                showMessage('Network error occurred. Please try again.', true);\n                submitBtn.disabled = false;\n                submitBtn.textContent = 'Submit Final Decision';\n            });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#66-enhanced-workflow-summary","title":"6.6 Enhanced Workflow Summary","text":"<p>The updated system now addresses all feedback requirements:</p>"},{"location":"certificate-automation/laravel-implementation-guide/#661-list-verification","title":"6.6.1 List Verification \u2705","text":"<ul> <li>CSV Format Validation: <code>CsvValidationService</code> validates exact format before sending to Head of School</li> <li>Column Order Validation: Ensures columns are in exact order: Name, Department, GraduationDate, CertificateID</li> <li>Data Format Validation: Validates each row format including department values and certificate ID patterns</li> <li>Duplicate Prevention: Checks for duplicate certificate IDs across the system</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#662-web-based-approval-process","title":"6.6.2 Web-Based Approval Process \u2705","text":"<ul> <li>Head of School: Receives email with link to <code>WebApprovalController@showHeadApprovalPage</code> </li> <li>Checkbox Interface: Can select all candidates at once or individual candidates via checkboxes</li> <li>One-Time Submission: Each approval email/token can only be used once (<code>head_approval_submitted</code> flag)</li> <li>Founder Individual Pages: Each approved graduate gets individual approval page for Founder</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#663-enhanced-approval-data-handling","title":"6.6.3 Enhanced Approval Data Handling \u2705","text":"<ul> <li>Candidate ID Tracking: All approvals include corresponding graduate IDs</li> <li>Batch-Based Emails: Each email covers only one batch of candidates</li> <li>Individual Results: For every candidate ID, result indicates approved/rejected with timestamps and comments</li> <li>Token-Based Security: Unique tokens prevent unauthorized access and ensure one-time use <pre><code>{\n    public function headApprovalAction(Graduate $graduate, User $user, Request $request)\n    {\n        if (!$user-&gt;isHeadOfSchool()) {\n            return response()-&gt;json([\n                'message' =&gt; 'Only Head of School can perform this action'\n            ], 403);\n        }\n\n        $validated = $request-&gt;validated();\n\n        $result = $this-&gt;approvalService-&gt;processHeadApproval(\n            $graduate,\n            $user,\n            $validated['action'], // 'approve' or 'reject'\n            $validated['comments'] ?? null\n        );\n\n        return response()-&gt;json($result, $result['success'] ? 200 : 400);\n    }\n\n    /**\n     * Process founder approval for individual graduate\n     */\n    public function processFounderApproval(IndividualApprovalRequest $request, Graduate $graduate): JsonResponse\n    {\n        $user = Auth::user();\n\n        if (!$user-&gt;isSchoolFounder()) {\n            return response()-&gt;json([\n                'success' =&gt; false,\n                'message' =&gt; 'Only School Founder can perform this action'\n            ], 403);\n        }\n\n        $validated = $request-&gt;validated();\n\n        $result = $this-&gt;approvalService-&gt;processFounderApproval(\n            $graduate,\n            $user,\n            $validated['action'], // 'approve' or 'reject'\n            $validated['comments'] ?? null\n        );\n\n        return response()-&gt;json($result, $result['success'] ? 200 : 400);\n    }\n\n    /**\n     * Get graduate details for approval\n     */\n    public function getGraduateForApproval(Graduate $graduate): JsonResponse\n    {\n        $user = Auth::user();\n\n        // Check if user can view this graduate for approval\n        if ($user-&gt;isHeadOfSchool() &amp;&amp; $graduate-&gt;approval_status !== 'pending') {\n            return response()-&gt;json([\n                'success' =&gt; false,\n                'message' =&gt; 'Graduate is not pending head approval'\n            ], 400);\n        }\n\n        if ($user-&gt;isSchoolFounder() &amp;&amp; $graduate-&gt;approval_status !== 'head_approved') {\n            return response()-&gt;json([\n                'success' =&gt; false,\n                'message' =&gt; 'Graduate is not pending founder approval'\n            ], 400);\n        }\n\n        return response()-&gt;json([\n            'success' =&gt; true,\n            'graduate' =&gt; [\n                'id' =&gt; $graduate-&gt;id,\n                'name' =&gt; $graduate-&gt;name,\n                'email' =&gt; $graduate-&gt;email,\n                'department' =&gt; $graduate-&gt;department,\n                'graduation_date' =&gt; $graduate-&gt;graduation_date-&gt;format('Y-m-d'),\n                'certificate_id' =&gt; $graduate-&gt;certificate_id,\n                'approval_status' =&gt; $graduate-&gt;approval_status,\n                'batch' =&gt; [\n                    'id' =&gt; $graduate-&gt;batch-&gt;id,\n                    'batch_name' =&gt; $graduate-&gt;batch-&gt;batch_name,\n                    'department' =&gt; $graduate-&gt;batch-&gt;department,\n                ]\n            ]\n        ]);\n    }\n\n    /**\n     * Get list of graduates pending approval for current user\n     */\n    public function getPendingApprovals(): JsonResponse\n    {\n        $user = Auth::user();\n\n        if ($user-&gt;isHeadOfSchool()) {\n            $graduates = Graduate::with(['batch:id,batch_name,department'])\n                -&gt;where('approval_status', 'pending')\n                -&gt;orderBy('created_at', 'asc')\n                -&gt;paginate(20);\n        } elseif ($user-&gt;isSchoolFounder()) {\n            $graduates = Graduate::with(['batch:id,batch_name,department'])\n                -&gt;where('approval_status', 'head_approved')\n                -&gt;orderBy('head_approval_date', 'asc')\n                -&gt;paginate(20);\n        } else {\n            return response()-&gt;json([\n                'success' =&gt; false,\n                'message' =&gt; 'User not authorized to view pending approvals'\n            ], 403);\n        }\n\n        return response()-&gt;json([\n            'success' =&gt; true,\n            'graduates' =&gt; $graduates-&gt;items(),\n            'pagination' =&gt; [\n                'current_page' =&gt; $graduates-&gt;currentPage(),\n                'last_page' =&gt; $graduates-&gt;lastPage(),\n                'per_page' =&gt; $graduates-&gt;perPage(),\n                'total' =&gt; $graduates-&gt;total(),\n            ]\n        ]);\n    }\n}\n</code></pre></li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#642-individual-approval-request-validation","title":"6.4.2 Individual Approval Request Validation","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass IndividualApprovalRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request\n     */\n    public function authorize(): bool\n    {\n        return auth()-&gt;check() &amp;&amp; auth()-&gt;user()-&gt;canApprove();\n    }\n\n    /**\n     * Get the validation rules that apply to the request\n     */\n    public function rules(): array\n    {\n        return [\n            'action' =&gt; 'required|in:approve,reject',\n            'comments' =&gt; 'nullable|string|max:1000',\n        ];\n    }\n\n    /**\n     * Get custom messages for validator errors\n     */\n    public function messages(): array\n    {\n        return [\n            'action.required' =&gt; 'Action is required (approve or reject)',\n            'action.in' =&gt; 'Action must be either approve or reject',\n            'comments.max' =&gt; 'Comments cannot exceed 1000 characters',\n        ];\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#65-enhanced-email-notification-service","title":"6.5 Enhanced Email Notification Service","text":"<pre><code>&lt;?php\n\nnamespace App\\Services;\n\nuse App\\Models\\CertificateBatch;\nuse App\\Models\\Graduate;\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Mail;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass EmailNotificationService\n{\n    /**\n     * Send batch approval notification to Head of School\n     */\n    public function sendBatchApprovalNotification(CertificateBatch $batch, User $approver, string $type): void\n    {\n        $emailData = [\n            'approver_name' =&gt; $approver-&gt;name,\n            'batch_name' =&gt; $batch-&gt;batch_name,\n            'department' =&gt; $batch-&gt;department,\n            'graduation_date' =&gt; $batch-&gt;graduation_date-&gt;format('F j, Y'),\n            'total_graduates' =&gt; $batch-&gt;total_graduates,\n            'approval_url' =&gt; route('approval.batch', ['batch' =&gt; $batch-&gt;id]),\n            'graduates' =&gt; $batch-&gt;graduates-&gt;map(function ($graduate) {\n                return [\n                    'name' =&gt; $graduate-&gt;name,\n                    'email' =&gt; $graduate-&gt;email,\n                    'certificate_id' =&gt; $graduate-&gt;certificate_id,\n                    'approval_url' =&gt; route('approval.graduate', ['graduate' =&gt; $graduate-&gt;id])\n                ];\n            })\n        ];\n\n        Mail::send('emails.batch-approval-notification', $emailData, function ($message) use ($approver, $batch) {\n            $message-&gt;to($approver-&gt;email, $approver-&gt;name)\n                -&gt;subject(\"Certificate Approval Required: {$batch-&gt;batch_name}\")\n                -&gt;from(config('mail.from.address'), config('mail.from.name'));\n        });\n    }\n\n    /**\n     * Send individual approval notification to Founder\n     */\n    public function sendIndividualApprovalNotification(Graduate $graduate, User $approver, string $type): void\n    {\n        $emailData = [\n            'approver_name' =&gt; $approver-&gt;name,\n            'graduate_name' =&gt; $graduate-&gt;name,\n            'graduate_email' =&gt; $graduate-&gt;email,\n            'department' =&gt; $graduate-&gt;department,\n            'graduation_date' =&gt; $graduate-&gt;graduation_date-&gt;format('F j, Y'),\n            'certificate_id' =&gt; $graduate-&gt;certificate_id,\n            'batch_name' =&gt; $graduate-&gt;batch-&gt;batch_name,\n            'approval_url' =&gt; route('approval.graduate', ['graduate' =&gt; $graduate-&gt;id]),\n            'head_approval_date' =&gt; $graduate-&gt;head_approval_date?-&gt;format('F j, Y g:i A'),\n            'head_approval_comments' =&gt; $graduate-&gt;head_approval_comments,\n        ]\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#66-api-routes-for-individual-approval-workflow","title":"6.6 API Routes for Individual Approval Workflow","text":"<pre><code>&lt;?php\n\n// routes/api.php\n\nuse App\\Http\\Controllers\\IndividualApprovalController;\nuse App\\Http\\Controllers\\CertificateController;\nuse App\\Http\\Controllers\\VerificationController;\nuse App\\Http\\Controllers\\Auth\\SamlController;\nuse Illuminate\\Support\\Facades\\Route;\n\n// SAML Authentication Routes\nRoute::prefix('auth/saml')-&gt;group(function () {\n    Route::get('login', [SamlController::class, 'login'])-&gt;name('saml.login');\n    Route::post('acs', [SamlController::class, 'acs'])-&gt;name('saml.acs');\n    Route::get('sls', [SamlController::class, 'sls'])-&gt;name('saml.sls');\n    Route::get('metadata', [SamlController::class, 'metadata'])-&gt;name('saml.metadata');\n});\n\n// Protected Routes (require SAML authentication)\nRoute::middleware(['auth:saml'])-&gt;group(function () {\n\n    // Individual Approval Routes\n    Route::prefix('approvals')-&gt;group(function () {\n        // Get pending approvals for current user\n        Route::get('pending', [IndividualApprovalController::class, 'getPendingApprovals'])\n            -&gt;name('approvals.pending');\n\n        // Get specific graduate for approval\n        Route::get('graduate/{graduate}', [IndividualApprovalController::class, 'getGraduateForApproval'])\n            -&gt;name('approval.graduate');\n\n        // Head of School approval routes\n        Route::middleware(['role:head_of_school'])-&gt;group(function () {\n            Route::post('head/{graduate}', [IndividualApprovalController::class, 'processHeadApproval'])\n                -&gt;name('approval.head.process');\n        });\n\n        // Founder approval routes\n        Route::middleware(['role:school_founder'])-&gt;group(function () {\n            Route::post('founder/{graduate}', [IndividualApprovalController::class, 'processFounderApproval'])\n                -&gt;name('approval.founder.process');\n        });\n    });\n\n    // Certificate Management Routes\n    Route::prefix('certificates')-&gt;group(function () {\n        Route::post('generate', [CertificateController::class, 'generate'])\n            -&gt;name('certificates.generate')\n            -&gt;middleware(['role:administrator,head_of_school,school_founder']);\n\n        Route::get('status/{batch}', [CertificateController::class, 'status'])\n            -&gt;name('certificates.status')\n            -&gt;middleware(['role:administrator,head_of_school,school_founder']);\n\n        Route::get('download/{certificate}', [CertificateController::class, 'download'])\n            -&gt;name('certificate.download')\n            -&gt;middleware(['role:administrator,head_of_school,school_founder']);\n    });\n\n    // Batch Management Routes\n    Route::prefix('batches')-&gt;group(function () {\n        Route::get('/', [BatchController::class, 'index'])\n            -&gt;name('batches.index');\n\n        Route::post('/', [BatchController::class, 'store'])\n            -&gt;name('batches.store')\n            -&gt;middleware(['role:administrator']);\n\n        Route::get('{batch}', [BatchController::class, 'show'])\n            -&gt;name('batches.show');\n\n        Route::post('{batch}/initiate-approval', [BatchController::class, 'initiateApproval'])\n            -&gt;name('batches.initiate-approval')\n            -&gt;middleware(['role:administrator']);\n\n        Route::get('{batch}/statistics', [BatchController::class, 'getStatistics'])\n            -&gt;name('batches.statistics');\n    });\n});\n\n// Public Certificate Verification Routes\nRoute::prefix('verify')-&gt;group(function () {\n    Route::post('certificate', [VerificationController::class, 'verify'])\n        -&gt;name('certificate.verify');\n\n    Route::get('statistics', [VerificationController::class, 'statistics'])\n        -&gt;name('verification.statistics');\n});\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#67-workflow-summary","title":"6.7 Workflow Summary","text":"<p>The updated approval workflow now supports the requirements:</p>"},{"location":"certificate-automation/laravel-implementation-guide/#671-independence-of-actions","title":"6.7.1 Independence of Actions","text":"<ul> <li>Each graduate can be individually approved or rejected by Head of School</li> <li>Each graduate can be individually approved or rejected by Founder</li> <li>Actions on one graduate do not affect others in the batch</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#672-sequential-approval-flow","title":"6.7.2 Sequential Approval Flow","text":"<ol> <li>Batch Upload: Administrator uploads CSV and creates batch</li> <li>Initial Notification: Head of School receives email with list of all graduates</li> <li>Head Approval: Head of School reviews each graduate individually via email links</li> <li>Individual Forwarding: Each approved graduate is individually forwarded to Founder</li> <li>Founder Approval: Founder receives individual emails for each graduate approved by Head</li> <li>Certificate Generation: Only graduates with final Founder approval get certificates</li> </ol>"},{"location":"certificate-automation/laravel-implementation-guide/#673-data-handling","title":"6.7.3 Data Handling","text":"<ul> <li>Each approval/rejection is recorded with timestamp, approver, and comments</li> <li>Laravel receives and stores individual approval results</li> <li>Batch status is dynamically updated based on individual graduate statuses</li> <li>Complete audit trail maintained for each graduate's approval journey <pre><code>    public function sendApprovalNotificationEmail()\n    {\n        $subject = $type === 'founder_approval' \n            ? \"Final Approval Required: {$graduate-&gt;name}\" \n            : \"Approval Notification: {$graduate-&gt;name}\";\n\n        Mail::send('emails.individual-approval-notification', $emailData, function ($message) use ($approver, $subject) {\n            $message-&gt;to($approver-&gt;email, $approver-&gt;name)\n                -&gt;subject($subject)\n                -&gt;from(config('mail.from.address'), config('mail.from.name'));\n        });\n    }\n\n    /**\n     * Send certificate generation completion notification\n     */\n    public function sendCertificateGeneratedNotification(Graduate $graduate): void\n    {\n        try {\n            $emailData = [\n                'graduate_name' =&gt; $graduate-&gt;name,\n                'department' =&gt; $graduate-&gt;department,\n                'graduation_date' =&gt; $graduate-&gt;graduation_date-&gt;format('F j, Y'),\n                'certificate_number' =&gt; $graduate-&gt;certificate-&gt;certificate_number,\n                'download_url' =&gt; route('certificate.download', ['certificate' =&gt; $graduate-&gt;certificate-&gt;id]),\n                'verification_code' =&gt; $graduate-&gt;certificate-&gt;verification_code,\n                'verification_url' =&gt; route('certificate.verify', ['code' =&gt; $graduate-&gt;certificate-&gt;verification_code]),\n            ];\n\n            // Send to graduate\n            Mail::send('emails.certificate-ready', $emailData, function ($message) use ($graduate) {\n                $message-&gt;to($graduate-&gt;email, $graduate-&gt;name)\n                    -&gt;subject('Your Certificate is Ready - Lagos Aviation Academy')\n                    -&gt;from(config('mail.from.address'), config('mail.from.name'));\n            });\n\n            // Send notification to administrators\n            $administrators = User::where('role', 'administrator')-&gt;get();\n            foreach ($administrators as $admin) {\n                Mail::send('emails.certificate-generated-admin', $emailData, function ($message) use ($admin, $graduate) {\n                    $message-&gt;to($admin-&gt;email, $admin-&gt;name)\n                        -&gt;subject(\"Certificate Generated: {$graduate-&gt;name}\")\n                        -&gt;from(config('mail.from.address'), config('mail.from.name'));\n                });\n            }\n\n            if (!$headOfSchool) {\n                throw new \\Exception('Head of School user not found');\n            }\n\n            // Send batch notification to Head of School\n            SendBatchApprovalNotification::dispatch($batch, $headOfSchool, 'head_approval');\n\n            Log::info('Approval process initiated', [\n                'batch_id' =&gt; $batch-&gt;id,\n                'total_graduates' =&gt; $batch-&gt;total_graduates,\n                'head_of_school_email' =&gt; $headOfSchool-&gt;email\n            ]);\n\n            return [\n                'success' =&gt; true,\n                'message' =&gt; 'Approval process initiated - notification sent to Head of School',\n                'batch_id' =&gt; $batch-&gt;id,\n                'head_of_school_email' =&gt; $headOfSchool-&gt;email\n            ];\n\n        } catch (\\Exception $e) {\n            Log::error('Failed to initiate approval process', [\n                'batch_id' =&gt; $batch-&gt;id,\n                'error' =&gt; $e-&gt;getMessage()\n            ]);\n\n            return [\n                'success' =&gt; false,\n                'error' =&gt; $e-&gt;getMessage()\n            ];\n        }\n    }\n\n    /**\n     * Get approval statistics for a batch\n     */\n    public function getBatchApprovalStatistics(CertificateBatch $batch): array\n    {\n        $graduates = $batch-&gt;graduates;\n\n        return [\n            'total_graduates' =&gt; $graduates-&gt;count(),\n            'pending' =&gt; $graduates-&gt;where('approval_status', 'pending')-&gt;count(),\n            'head_approved' =&gt; $graduates-&gt;where('approval_status', 'head_approved')-&gt;count(),\n            'final_approved' =&gt; $graduates-&gt;where('approval_status', 'final_approved')-&gt;count(),\n            'rejected_by_head' =&gt; $graduates-&gt;where('approval_status', 'rejected_by_head')-&gt;count(),\n            'rejected_by_founder' =&gt; $graduates-&gt;where('approval_status', 'rejected_by_founder')-&gt;count(),\n            'certificates_generated' =&gt; $graduates-&gt;whereHas('certificate')-&gt;count(),\n        ];\n    }\n}\n</code></pre></li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#92-unit-tests","title":"9.2 Unit Tests","text":""},{"location":"certificate-automation/laravel-implementation-guide/#921-approval-workflow-service-test","title":"9.2.1 Approval Workflow Service Test","text":"<pre><code>&lt;?php\n\nnamespace Tests\\Unit;\n\nuse App\\Models\\CertificateBatch;\nuse App\\Models\\Graduate;\nuse App\\Models\\User;\nuse App\\Services\\ApprovalWorkflowService;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Tests\\TestCase;\n\nclass ApprovalWorkflowServiceTest extends TestCase\n{\n    use RefreshDatabase;\n\n    private ApprovalWorkflowService $approvalService;\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n        $this-&gt;approvalService = app(ApprovalWorkflowService::class);\n    }\n\n    public function test_head_approval_updates_graduate_status()\n    {\n        $headOfSchool = User::factory()-&gt;create(['role' =&gt; 'head_of_school']);\n        $batch = CertificateBatch::factory()-&gt;create();\n        $graduates = Graduate::factory()-&gt;count(3)-&gt;create([\n            'certificate_batch_id' =&gt; $batch-&gt;id,\n            'approval_status' =&gt; 'pending'\n        ]);\n\n        $result = $this-&gt;approvalService-&gt;processHeadApproval(\n            $batch,\n            $headOfSchool,\n            $graduates-&gt;pluck('id')-&gt;toArray()\n        );\n\n        $this-&gt;assertTrue($result['success']);\n        $this-&gt;assertEquals(3, $result['approved_count']);\n\n        foreach ($graduates as $graduate) {\n            $graduate-&gt;refresh();\n            $this-&gt;assertEquals('head_approved', $graduate-&gt;approval_status);\n            $this-&gt;assertEquals($headOfSchool-&gt;id, $graduate-&gt;head_approved_by);\n            $this-&gt;assertNotNull($graduate-&gt;head_approval_date);\n        }\n    }\n\n    public function test_unauthorized_user_cannot_approve()\n    {\n        $unauthorizedUser = User::factory()-&gt;create(['role' =&gt; 'it_support']);\n        $batch = CertificateBatch::factory()-&gt;create();\n        $graduates = Graduate::factory()-&gt;count(2)-&gt;create([\n            'certificate_batch_id' =&gt; $batch-&gt;id,\n            'approval_status' =&gt; 'pending'\n        ]);\n\n        $result = $this-&gt;approvalService-&gt;processHeadApproval(\n            $batch,\n            $unauthorizedUser,\n            $graduates-&gt;pluck('id')-&gt;toArray()\n        );\n\n        $this-&gt;assertFalse($result['success']);\n        $this-&gt;assertStringContains('not authorized', $result['error']);\n    }\n\n    public function test_founder_approval_completes_workflow()\n    {\n        $founder = User::factory()-&gt;create(['role' =&gt; 'school_founder']);\n        $batch = CertificateBatch::factory()-&gt;create();\n        $graduates = Graduate::factory()-&gt;count(2)-&gt;create([\n            'certificate_batch_id' =&gt; $batch-&gt;id,\n            'approval_status' =&gt; 'head_approved'\n        ]);\n\n        $result = $this-&gt;approvalService-&gt;processFounderApproval(\n            $batch,\n            $founder,\n            $graduates-&gt;pluck('id')-&gt;toArray()\n        );\n\n        $this-&gt;assertTrue($result['success']);\n        $this-&gt;assertEquals(2, $result['approved_count']);\n\n        foreach ($graduates as $graduate) {\n            $graduate-&gt;refresh();\n            $this-&gt;assertEquals('final_approved', $graduate-&gt;approval_status);\n            $this-&gt;assertEquals($founder-&gt;id, $graduate-&gt;founder_approved_by);\n            $this-&gt;assertNotNull($graduate-&gt;founder_approval_date);\n        }\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#10-performance-optimization","title":"10. Performance Optimization","text":""},{"location":"certificate-automation/laravel-implementation-guide/#101-database-optimization","title":"10.1 Database Optimization","text":""},{"location":"certificate-automation/laravel-implementation-guide/#1011-database-indexes","title":"10.1.1 Database Indexes","text":"<pre><code>&lt;?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    public function up()\n    {\n        Schema::table('graduates', function (Blueprint $table) {\n            // Indexes for common queries\n            $table-&gt;index(['certificate_batch_id', 'approval_status']);\n            $table-&gt;index(['approval_status', 'created_at']);\n            $table-&gt;index('certificate_id');\n            $table-&gt;index('email');\n            $table-&gt;index(['department', 'graduation_date']);\n        });\n\n        Schema::table('certificate_batches', function (Blueprint $table) {\n            $table-&gt;index(['batch_status', 'created_at']);\n            $table-&gt;index(['department', 'graduation_date']);\n            $table-&gt;index('created_by');\n        });\n\n        Schema::table('certificates', function (Blueprint $table) {\n            $table-&gt;index('verification_code');\n            $table-&gt;index(['graduate_id', 'generated_at']);\n            $table-&gt;index('generated_at');\n        });\n\n        Schema::table('users', function (Blueprint $table) {\n            $table-&gt;index(['role', 'is_active']);\n            $table-&gt;index('last_saml_login');\n        });\n    }\n\n    public function down()\n    {\n        Schema::table('graduates', function (Blueprint $table) {\n            $table-&gt;dropIndex(['certificate_batch_id', 'approval_status']);\n            $table-&gt;dropIndex(['approval_status', 'created_at']);\n            $table-&gt;dropIndex(['certificate_id']);\n            $table-&gt;dropIndex(['email']);\n            $table-&gt;dropIndex(['department', 'graduation_date']);\n        });\n\n        Schema::table('certificate_batches', function (Blueprint $table) {\n            $table-&gt;dropIndex(['batch_status', 'created_at']);\n            $table-&gt;dropIndex(['department', 'graduation_date']);\n            $table-&gt;dropIndex(['created_by']);\n        });\n\n        Schema::table('certificates', function (Blueprint $table) {\n            $table-&gt;dropIndex(['verification_code']);\n            $table-&gt;dropIndex(['graduate_id', 'generated_at']);\n            $table-&gt;dropIndex(['generated_at']);\n        });\n\n        Schema::table('users', function (Blueprint $table) {\n            $table-&gt;dropIndex(['role', 'is_active']);\n            $table-&gt;dropIndex(['last_saml_login']);\n        });\n    }\n};\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#1012-query-optimization","title":"10.1.2 Query Optimization","text":"<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\CertificateBatch;\nuse App\\Models\\Graduate;\nuse Illuminate\\Http\\Request;\n\nclass DashboardController extends Controller\n{\n    /**\n     * Get dashboard data with optimized queries\n     */\n    public function index(Request $request)\n    {\n        $user = auth()-&gt;user();\n\n        // Use eager loading to prevent N+1 queries\n        $batches = CertificateBatch::with([\n            'graduates' =&gt; function ($query) {\n                $query-&gt;select('id', 'certificate_batch_id', 'approval_status');\n            },\n            'creator:id,name,email'\n        ])\n        -&gt;when($user-&gt;role === 'head_of_school', function ($query) {\n            return $query-&gt;where('batch_status', 'pending_head_approval');\n        })\n        -&gt;when($user-&gt;role === 'school_founder', function ($query) {\n            return $query-&gt;where('batch_status', 'pending_founder_approval');\n        })\n        -&gt;orderBy('created_at', 'desc')\n        -&gt;paginate(10);\n\n        // Get statistics with single queries\n        $statistics = [\n            'total_batches' =&gt; CertificateBatch::count(),\n            'pending_approval' =&gt; Graduate::where('approval_status', 'pending')-&gt;count(),\n            'certificates_generated' =&gt; Graduate::whereHas('certificate')-&gt;count(),\n            'recent_activity' =&gt; $this-&gt;getRecentActivity()\n        ];\n\n        return view('dashboard.index', compact('batches', 'statistics'));\n    }\n\n    /**\n     * Get recent activity with optimized query\n     */\n    private function getRecentActivity()\n    {\n        return Graduate::with(['batch:id,batch_name', 'headApprover:id,name', 'founderApprover:id,name'])\n            -&gt;whereNotNull('head_approval_date')\n            -&gt;orWhereNotNull('founder_approval_date')\n            -&gt;orderBy('updated_at', 'desc')\n            -&gt;limit(10)\n            -&gt;get(['id', 'name', 'approval_status', 'head_approval_date', 'founder_approval_date', 'certificate_batch_id', 'head_approved_by', 'founder_approved_by']);\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#102-caching-strategy","title":"10.2 Caching Strategy","text":""},{"location":"certificate-automation/laravel-implementation-guide/#1021-redis-caching-implementation","title":"10.2.1 Redis Caching Implementation","text":"<pre><code>&lt;?php\n\nnamespace App\\Services;\n\nuse App\\Models\\Certificate;\nuse App\\Models\\CertificateBatch;\nuse App\\Models\\Graduate;\nuse Illuminate\\Support\\Facades\\Cache;\n\nclass CacheService\n{\n    private const CACHE_TTL = 3600; // 1 hour\n\n    /**\n     * Cache dashboard statistics\n     */\n    public function getDashboardStatistics(): array\n    {\n        return Cache::remember('dashboard_statistics', self::CACHE_TTL, function () {\n            return [\n                'total_batches' =&gt; CertificateBatch::count(),\n                'total_graduates' =&gt; Graduate::count(),\n                'pending_approvals' =&gt; Graduate::where('approval_status', 'pending')-&gt;count(),\n                'head_approved' =&gt; Graduate::where('approval_status', 'head_approved')-&gt;count(),\n                'final_approved' =&gt; Graduate::where('approval_status', 'final_approved')-&gt;count(),\n                'certificates_generated' =&gt; Certificate::count(),\n                'total_verifications' =&gt; Certificate::sum('verification_count'),\n            ];\n        });\n    }\n\n    /**\n     * Cache batch details\n     */\n    public function getBatchDetails(int $batchId): ?CertificateBatch\n    {\n        return Cache::remember(\"batch_details_{$batchId}\", self::CACHE_TTL, function () use ($batchId) {\n            return CertificateBatch::with([\n                'graduates',\n                'creator:id,name,email'\n            ])-&gt;find($batchId);\n        });\n    }\n\n    /**\n     * Cache certificate verification\n     */\n    public function getCertificateByVerificationCode(string $code): ?Certificate\n    {\n        return Cache::remember(\"certificate_verification_{$code}\", self::CACHE_TTL * 24, function () use ($code) {\n            return Certificate::with('graduate')\n                -&gt;where('verification_code', strtoupper($code))\n                -&gt;first();\n        });\n    }\n\n    /**\n     * Invalidate cache when data changes\n     */\n    public function invalidateDashboardCache(): void\n    {\n        Cache::forget('dashboard_statistics');\n    }\n\n    /**\n     * Invalidate batch cache\n     */\n    public function invalidateBatchCache(int $batchId): void\n    {\n        Cache::forget(\"batch_details_{$batchId}\");\n        $this-&gt;invalidateDashboardCache();\n    }\n\n    /**\n     * Invalidate certificate cache\n     */\n    public function invalidateCertificateCache(string $verificationCode): void\n    {\n        Cache::forget(\"certificate_verification_{$verificationCode}\");\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#1022-model-events-for-cache-invalidation","title":"10.2.2 Model Events for Cache Invalidation","text":"<pre><code>&lt;?php\n\nnamespace App\\Models;\n\nuse App\\Services\\CacheService;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Graduate extends Model\n{\n    protected static function booted()\n    {\n        static::updated(function ($graduate) {\n            app(CacheService::class)-&gt;invalidateBatchCache($graduate-&gt;certificate_batch_id);\n        });\n\n        static::created(function ($graduate) {\n            app(CacheService::class)-&gt;invalidateBatchCache($graduate-&gt;certificate_batch_id);\n        });\n\n        static::deleted(function ($graduate) {\n            app(CacheService::class)-&gt;invalidateBatchCache($graduate-&gt;certificate_batch_id);\n        });\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#103-queue-optimization","title":"10.3 Queue Optimization","text":""},{"location":"certificate-automation/laravel-implementation-guide/#1031-queue-configuration","title":"10.3.1 Queue Configuration","text":"<pre><code>// config/queue.php\n&lt;?php\n\nreturn [\n    'default' =&gt; env('QUEUE_CONNECTION', 'redis'),\n\n    'connections' =&gt; [\n        'redis' =&gt; [\n            'driver' =&gt; 'redis',\n            'connection' =&gt; 'default',\n            'queue' =&gt; env('REDIS_QUEUE', 'default'),\n            'retry_after' =&gt; 90,\n            'block_for' =&gt; null,\n        ],\n\n        'certificate_generation' =&gt; [\n            'driver' =&gt; 'redis',\n            'connection' =&gt; 'default',\n            'queue' =&gt; 'certificate_generation',\n            'retry_after' =&gt; 300, // 5 minutes for certificate generation\n            'block_for' =&gt; null,\n        ],\n\n        'notifications' =&gt; [\n            'driver' =&gt; 'redis',\n            'connection' =&gt; 'default',\n            'queue' =&gt; 'notifications',\n            'retry_after' =&gt; 60,\n            'block_for' =&gt; null,\n        ],\n    ],\n\n    'failed' =&gt; [\n        'driver' =&gt; env('QUEUE_FAILED_DRIVER', 'database'),\n        'database' =&gt; env('DB_CONNECTION', 'mysql'),\n        'table' =&gt; 'failed_jobs',\n    ],\n];\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#1032-optimized-job-implementation","title":"10.3.2 Optimized Job Implementation","text":"<pre><code>&lt;?php\n\nnamespace App\\Jobs;\n\nuse App\\Models\\Graduate;\nuse App\\Services\\CertificateGenerationService;\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Support\\Facades\\Log;\n\nclass GenerateCertificateJob implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    public $tries = 3;\n    public $timeout = 300; // 5 minutes\n    public $backoff = [60, 120, 300]; // Exponential backoff\n\n    private Graduate $graduate;\n\n    public function __construct(Graduate $graduate)\n    {\n        $this-&gt;graduate = $graduate;\n        $this-&gt;onQueue('certificate_generation');\n    }\n\n    /**\n     * Execute the job\n     */\n    public function handle(CertificateGenerationService $certificateService): void\n    {\n        try {\n            Log::info('Starting certificate generation', [\n                'graduate_id' =&gt; $this-&gt;graduate-&gt;id,\n                'graduate_name' =&gt; $this-&gt;graduate-&gt;name\n            ]);\n\n            $certificate = $certificateService-&gt;generateCertificate($this-&gt;graduate);\n\n            Log::info('Certificate generated successfully', [\n                'graduate_id' =&gt; $this-&gt;graduate-&gt;id,\n                'certificate_id' =&gt; $certificate-&gt;id\n            ]);\n\n        } catch (\\Exception $e) {\n            Log::error('Certificate generation failed', [\n                'graduate_id' =&gt; $this-&gt;graduate-&gt;id,\n                'error' =&gt; $e-&gt;getMessage(),\n                'attempt' =&gt; $this-&gt;attempts()\n            ]);\n\n            throw $e;\n        }\n    }\n\n    /**\n     * Handle job failure\n     */\n    public function failed(\\Throwable $exception): void\n    {\n        Log::error('Certificate generation job failed permanently', [\n            'graduate_id' =&gt; $this-&gt;graduate-&gt;id,\n            'error' =&gt; $exception-&gt;getMessage(),\n            'attempts' =&gt; $this-&gt;attempts()\n        ]);\n\n        // Notify administrators about the failure\n        // Could send email or create notification record\n    }\n}\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#conclusion","title":"Conclusion","text":"<p>This Laravel implementation guide provides a comprehensive, secure, and scalable solution for the Lagos Aviation Academy Certificate Automation System with individual approval workflow. The implementation addresses all specified requirements:</p>"},{"location":"certificate-automation/laravel-implementation-guide/#key-implementation-highlights","title":"Key Implementation Highlights:","text":"<ol> <li>Individual Approval Workflow: Each graduate can be independently approved or rejected by Head of School and Founder without affecting others</li> <li>Sequential Email-Based Approval: Head of School receives batch notification, then Founder receives individual notifications for each approved graduate</li> <li>Google SAML Authentication: Secure authentication using Google SAML 2.0 with email-based role identification (<code>head@lagosaviationacademy.edu.ng</code>, <code>founder@lagosaviationacademy.edu.ng</code>)</li> <li>Complete Data Tracking: Laravel receives and stores individual approval results with full audit trail</li> <li>Laravel Best Practices: Following Laravel 11.x conventions with proper service classes, jobs, events, and middleware</li> <li>Security-First Approach: Comprehensive security measures including input validation, encryption, audit logging, and rate limiting</li> </ol>"},{"location":"certificate-automation/laravel-implementation-guide/#individual-approval-features","title":"Individual Approval Features:","text":"<ul> <li>Independence of Actions: <code>processHeadApproval()</code> and <code>processFounderApproval()</code> handle individual graduates</li> <li>Sequential Flow: Head approval triggers <code>SendIndividualApprovalNotification</code> to Founder for each graduate</li> <li>Complete Data Handling: Individual approval results stored with timestamps, comments, and approver information</li> <li>Certificate Generation: Only graduates with <code>final_approved</code> status trigger <code>GenerateCertificateJob</code></li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#security-features","title":"Security Features:","text":"<ul> <li>SAML 2.0 Authentication with Google Identity Provider and email-based authorization</li> <li>Role-based access control with <code>RoleBasedAccess</code> middleware</li> <li>Individual approval validation ensuring proper workflow sequence</li> <li>Comprehensive audit logging for all approval actions</li> <li>Input validation with <code>IndividualApprovalRequest</code></li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#api-endpoints-for-individual-workflow","title":"API Endpoints for Individual Workflow:","text":"<ul> <li>Head Approval: <code>POST /api/approvals/head/{graduate}</code> - Individual graduate approval/rejection</li> <li>Founder Approval: <code>POST /api/approvals/founder/{graduate}</code> - Final individual approval/rejection</li> <li>Pending List: <code>GET /api/approvals/pending</code> - Role-based pending approvals</li> <li>Graduate Details: <code>GET /api/approvals/graduate/{graduate}</code> - Individual graduate information</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#performance-optimizations","title":"Performance Optimizations:","text":"<ul> <li>Queue-based notifications with <code>SendIndividualApprovalNotification</code> and <code>SendBatchApprovalNotification</code></li> <li>Redis caching for frequently accessed data</li> <li>Database indexing for optimal query performance</li> <li>Individual certificate generation jobs for scalability</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#next-steps","title":"Next Steps:","text":"<ol> <li>Google SAML Setup: Configure Google Workspace SAML with authorized email addresses</li> <li>Database Migration: Create tables with individual approval tracking fields</li> <li>Email Templates: Design templates for batch and individual approval notifications</li> <li>Queue Workers: Set up Laravel Horizon for background job processing</li> <li>Testing: Validate individual approval workflow with comprehensive tests</li> <li>Deployment: Deploy with proper monitoring and logging</li> </ol> <p>This implementation completely eliminates Zoho dependencies while providing a robust, secure, and maintainable certificate automation system that supports individual graduate approval workflow as specified, ensuring independence of actions and complete data tracking in Laravel.</p>"},{"location":"certificate-automation/laravel-implementation-guide/#updated-conclusion","title":"Updated Conclusion","text":"<p>This Laravel implementation guide provides a comprehensive, secure, and scalable solution for the Lagos Aviation Academy Certificate Automation System with enhanced web-based approval workflow. The implementation addresses all specified requirements including the latest feedback:</p>"},{"location":"certificate-automation/laravel-implementation-guide/#key-implementation-highlights_1","title":"Key Implementation Highlights:","text":"<ol> <li>CSV Format Validation: <code>CsvValidationService</code> ensures exact format compliance before Head of School notification</li> <li>Web-Based Approval Interface: Email links to interactive web pages with checkbox selection for bulk/individual approvals</li> <li>One-Time Submission Security: Token-based system prevents multiple submissions per approval email</li> <li>Individual Graduate Tracking: Complete candidate ID tracking with approve/reject results for each graduate</li> <li>Google SAML Authentication: Secure authentication using Google SAML 2.0 with email-based role identification</li> <li>Laravel Best Practices: Following Laravel 11.x conventions with proper service classes, jobs, events, and middleware</li> </ol>"},{"location":"certificate-automation/laravel-implementation-guide/#enhanced-approval-features","title":"Enhanced Approval Features:","text":""},{"location":"certificate-automation/laravel-implementation-guide/#list-verification-new","title":"\u2705 List Verification (NEW)","text":"<ul> <li>Format Validation: <code>validateCsvFormat()</code> validates exact column order and format</li> <li>Data Validation: <code>validateRowFormat()</code> ensures proper data types and formats</li> <li>Duplicate Prevention: Checks for duplicate certificate IDs across system</li> <li>Pre-Approval Validation: Only validated lists are sent to Head of School</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#web-based-approval-process-new","title":"\u2705 Web-Based Approval Process (NEW)","text":"<ul> <li>Head of School Interface: <code>showHeadApprovalPage()</code> with checkbox selection</li> <li>Bulk Actions: \"Approve All\", \"Reject All\", and individual selection options</li> <li>One-Time Submission: <code>head_approval_submitted</code> flag prevents resubmission</li> <li>Founder Individual Pages: Each approved graduate gets individual approval page</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#enhanced-data-handling-new","title":"\u2705 Enhanced Data Handling (NEW)","text":"<ul> <li>Candidate ID Tracking: All approvals include corresponding graduate IDs in database</li> <li>Batch-Specific Emails: Each email covers only one batch with unique tokens</li> <li>Individual Results: Every candidate ID has approve/reject result with timestamps and comments</li> <li>Token Security: <code>generateApprovalToken()</code> ensures secure, one-time access</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#web-interface-components","title":"Web Interface Components:","text":"<ul> <li>Head Approval Template: <code>head-approval.blade.php</code> with JavaScript for bulk selection</li> <li>Founder Approval Template: <code>founder-approval.blade.php</code> for individual graduate decisions</li> <li>Web Routes: <code>/approval/head/{token}</code> and <code>/approval/founder/{token}</code></li> <li>AJAX Processing: Real-time form submission with validation and feedback</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#security-features_1","title":"Security Features:","text":"<ul> <li>SAML 2.0 Authentication with Google Identity Provider and email-based authorization</li> <li>Token-Based Access: Unique tokens for each approval email with expiration</li> <li>One-Time Use Protection: Database flags prevent multiple submissions</li> <li>Input Validation: Comprehensive validation for all approval data</li> <li>CSRF Protection: Laravel CSRF tokens for all web form submissions</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#database-schema-enhancements","title":"Database Schema Enhancements:","text":"<pre><code>-- New fields added to certificate_batches table\nALTER TABLE certificate_batches ADD COLUMN head_approval_token VARCHAR(255);\nALTER TABLE certificate_batches ADD COLUMN head_approval_submitted BOOLEAN DEFAULT FALSE;\n\n-- New fields added to graduates table  \nALTER TABLE graduates ADD COLUMN founder_approval_token VARCHAR(255);\nALTER TABLE graduates ADD COLUMN founder_approval_submitted BOOLEAN DEFAULT FALSE;\nALTER TABLE graduates ADD COLUMN head_approval_comments TEXT;\nALTER TABLE graduates ADD COLUMN founder_approval_comments TEXT;\n</code></pre>"},{"location":"certificate-automation/laravel-implementation-guide/#complete-workflow-process","title":"Complete Workflow Process:","text":"<ol> <li>CSV Upload &amp; Validation: Administrator uploads CSV \u2192 <code>CsvValidationService</code> validates format</li> <li>Head of School Notification: Email sent with web link to approval page</li> <li>Web-Based Head Approval: Checkbox interface for bulk/individual selection \u2192 one-time submission</li> <li>Individual Founder Notifications: Each approved graduate triggers individual email to Founder</li> <li>Founder Web Approval: Individual approval pages for final decisions</li> <li>Certificate Generation: Only final approved graduates trigger certificate generation</li> </ol>"},{"location":"certificate-automation/laravel-implementation-guide/#performance-optimizations_1","title":"Performance Optimizations:","text":"<ul> <li>Queue-based processing for all email notifications and certificate generation</li> <li>Token-based security eliminating need for user authentication on approval pages</li> <li>Database indexing for optimal query performance on approval tokens</li> <li>AJAX form submission for better user experience</li> </ul>"},{"location":"certificate-automation/laravel-implementation-guide/#next-steps_1","title":"Next Steps:","text":"<ol> <li>Google SAML Setup: Configure Google Workspace SAML with authorized email addresses</li> <li>Database Migration: Run migrations to add new approval tracking fields</li> <li>Email Templates: Create HTML email templates with approval links</li> <li>Queue Workers: Set up Laravel Horizon for background job processing</li> <li>Testing: Validate complete web-based approval workflow</li> <li>Deployment: Deploy with proper monitoring and logging</li> </ol> <p>This implementation completely eliminates Zoho dependencies while providing a robust, secure, and maintainable certificate automation system that supports web-based approval workflow with complete validation and tracking as specified, ensuring proper format validation, one-time submissions, and complete candidate ID tracking in Laravel.</p>"},{"location":"certificate-automation/technical-documentation/","title":"Lagos Aviation Academy Certificate Automation System","text":""},{"location":"certificate-automation/technical-documentation/#technical-documentation-v10","title":"Technical Documentation v1.0","text":""},{"location":"certificate-automation/technical-documentation/#document-information","title":"Document Information","text":"<ul> <li>Version: 1.0</li> <li>Date: July 31, 2025</li> <li>Author: Omotayo Isaiah Kuye</li> <li>Status: Draft</li> <li>Classification: Internal Technical Documentation</li> </ul>"},{"location":"certificate-automation/technical-documentation/#table-of-contents","title":"Table of Contents","text":"<ol> <li>System Overview</li> <li>Architecture Design</li> <li>Component Specifications</li> <li>Data Models and Schemas</li> <li>API Specifications</li> <li>Workflow Implementations</li> <li>Security and Compliance</li> <li>Deployment Guide</li> <li>Monitoring and Maintenance</li> <li>Troubleshooting Guide</li> </ol>"},{"location":"certificate-automation/technical-documentation/#1-system-overview","title":"1. System Overview","text":""},{"location":"certificate-automation/technical-documentation/#11-purpose","title":"1.1 Purpose","text":"<p>The Certificate Automation System streamlines the generation, approval, and distribution of graduation certificates for Lagos Aviation Academy, reducing processing time by 95% while maintaining security and audit compliance.</p>"},{"location":"certificate-automation/technical-documentation/#12-scope","title":"1.2 Scope","text":"<ul> <li>Automated certificate generation workflow</li> <li>Multi-stage approval process</li> <li>Digital signature integration</li> <li>Certificate verification portal</li> <li>Bulk graduate data processing</li> <li>Email distribution system</li> </ul>"},{"location":"certificate-automation/technical-documentation/#13-technology-stack","title":"1.3 Technology Stack","text":"<ul> <li>Primary Platform: Zoho Ecosystem (Flow, CRM, Forms, Creator, Sign)</li> <li>Certificate Generation: Custom Certificate Automation Service</li> <li>Database: Zoho CRM + Custom modules</li> <li>Authentication: Zoho OAuth 2.0</li> <li>File Storage: Zoho WorkDrive</li> <li>Monitoring: Zoho Analytics</li> </ul>"},{"location":"certificate-automation/technical-documentation/#14-key-stakeholders","title":"1.4 Key Stakeholders","text":"Role Responsibilities System Access School Administrator Data upload, template management Full system access Head of School First-level approval Approval dashboard School Founder Final approval, signature Executive dashboard IT Support System maintenance Administrative access"},{"location":"certificate-automation/technical-documentation/#2-architecture-design","title":"2. Architecture Design","text":""},{"location":"certificate-automation/technical-documentation/#21-high-level-architecture","title":"2.1 High-Level Architecture","text":"<pre><code>graph TB\n    subgraph \"Data Input Layer\"\n        A[Zoho Forms - Bulk Upload]\n        B[Manual Entry Interface]\n    end\n\n    subgraph \"Data Processing Layer\"\n        C[Zoho CRM - Graduate Records]\n        D[Data Validation Engine]\n        E[Batch Processing Service]\n    end\n\n    subgraph \"Workflow Layer\"\n        F[Zoho Flow - Orchestration]\n        G[Approval Workflow Engine]\n        H[Notification Service]\n    end\n\n    subgraph \"Approval Layer\"\n        I[Head of School Dashboard]\n        J[Founder Dashboard]\n        K[Approval Decision Engine]\n    end\n\n    subgraph \"Certificate Generation Layer\"\n        L[Certificate Automation Service]\n        M[Template Processing Engine]\n        N[Digital Signature Service]\n    end\n\n    subgraph \"Distribution Layer\"\n        O[Email Service]\n        P[Certificate Storage]\n        Q[Verification Portal]\n    end\n\n    A --&gt; C\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G\n    G --&gt; H\n    H --&gt; I\n    H --&gt; J\n    I --&gt; K\n    J --&gt; K\n    K --&gt; L\n    L --&gt; M\n    M --&gt; N\n    N --&gt; O\n    N --&gt; P\n    P --&gt; Q</code></pre>"},{"location":"certificate-automation/technical-documentation/#22-system-components","title":"2.2 System Components","text":""},{"location":"certificate-automation/technical-documentation/#221-core-components","title":"2.2.1 Core Components","text":"<ol> <li>Data Ingestion Module: Handles bulk CSV uploads and validation</li> <li>Approval Workflow Engine: Manages multi-stage approval process</li> <li>Certificate Generation Service: Processes templates and generates certificates</li> <li>Digital Signature Module: Integrates with Zoho Sign for automated signing</li> <li>Verification Portal: Public interface for certificate validation</li> </ol>"},{"location":"certificate-automation/technical-documentation/#222-integration-points","title":"2.2.2 Integration Points","text":"<ul> <li>Zoho Flow: Primary orchestration engine</li> <li>Zoho CRM: Master data repository</li> <li>Zoho Sign: Digital signature provider</li> <li>External Certificate Service: Custom certificate generation API</li> <li>Email Gateway: Certificate distribution</li> </ul>"},{"location":"certificate-automation/technical-documentation/#3-component-specifications","title":"3. Component Specifications","text":""},{"location":"certificate-automation/technical-documentation/#31-zoho-forms-configuration","title":"3.1 Zoho Forms Configuration","text":""},{"location":"certificate-automation/technical-documentation/#311-bulk-upload-form-structure","title":"3.1.1 Bulk Upload Form Structure","text":"<pre><code>{\n  \"form_name\": \"Graduate_Bulk_Upload\",\n  \"form_id\": \"graduate_upload_form_001\",\n  \"fields\": [\n    {\n      \"field_name\": \"batch_identifier\",\n      \"field_type\": \"single_line\",\n      \"required\": true,\n      \"validation\": \"alphanumeric\",\n      \"max_length\": 50\n    },\n    {\n      \"field_name\": \"graduation_date\",\n      \"field_type\": \"date\",\n      \"required\": true,\n      \"validation\": \"future_date\"\n    },\n    {\n      \"field_name\": \"department\",\n      \"field_type\": \"dropdown\",\n      \"required\": true,\n      \"options\": [\n        \"Flight Operations\",\n        \"Aviation Engineering\",\n        \"Air Traffic Control\",\n        \"Aircraft Maintenance\",\n        \"Aviation Management\"\n      ]\n    },\n    {\n      \"field_name\": \"certificate_template\",\n      \"field_type\": \"dropdown\",\n      \"required\": true,\n      \"options\": [\n        \"Standard Certificate\",\n        \"Honors Certificate\",\n        \"Professional Certificate\"\n      ]\n    },\n    {\n      \"field_name\": \"csv_file\",\n      \"field_type\": \"file_upload\",\n      \"required\": true,\n      \"file_types\": [\".csv\"],\n      \"max_size\": \"10MB\"\n    }\n  ]\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#312-csv-file-validation-rules","title":"3.1.2 CSV File Validation Rules","text":"<pre><code>// Validation Schema\nconst csvValidationSchema = {\n  required_columns: [\n    \"Name\",\n    \"Department\", \n    \"GraduationDate\",\n    \"CertificateID\",\n    \"Email\"\n  ],\n  validation_rules: {\n    \"Name\": {\n      \"type\": \"string\",\n      \"min_length\": 2,\n      \"max_length\": 100,\n      \"pattern\": \"^[a-zA-Z\\\\s\\\\-\\\\.]+$\"\n    },\n    \"Department\": {\n      \"type\": \"enum\",\n      \"allowed_values\": [\n        \"Flight Operations\",\n        \"Aviation Engineering\", \n        \"Air Traffic Control\",\n        \"Aircraft Maintenance\",\n        \"Aviation Management\"\n      ]\n    },\n    \"GraduationDate\": {\n      \"type\": \"date\",\n      \"format\": \"YYYY-MM-DD\",\n      \"min_date\": \"today\"\n    },\n    \"CertificateID\": {\n      \"type\": \"string\",\n      \"pattern\": \"^LAA\\\\d{4}-\\\\d{3}$\",\n      \"unique\": true\n    },\n    \"Email\": {\n      \"type\": \"email\",\n      \"required\": true\n    }\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#32-zoho-crm-configuration","title":"3.2 Zoho CRM Configuration","text":""},{"location":"certificate-automation/technical-documentation/#321-custom-modules","title":"3.2.1 Custom Modules","text":""},{"location":"certificate-automation/technical-documentation/#graduate-records-module","title":"Graduate Records Module","text":"<pre><code>{\n  \"module_name\": \"Graduate_Records\",\n  \"api_name\": \"Graduate_Records\",\n  \"fields\": [\n    {\n      \"field_name\": \"Graduate_Name\",\n      \"api_name\": \"Graduate_Name\",\n      \"data_type\": \"text\",\n      \"required\": true,\n      \"max_length\": 100\n    },\n    {\n      \"field_name\": \"Certificate_ID\",\n      \"api_name\": \"Certificate_ID\",\n      \"data_type\": \"text\",\n      \"required\": true,\n      \"unique\": true,\n      \"pattern\": \"LAA\\\\d{4}-\\\\d{3}\"\n    },\n    {\n      \"field_name\": \"Department\",\n      \"api_name\": \"Department\",\n      \"data_type\": \"picklist\",\n      \"required\": true,\n      \"options\": [\n        \"Flight Operations\",\n        \"Aviation Engineering\",\n        \"Air Traffic Control\", \n        \"Aircraft Maintenance\",\n        \"Aviation Management\"\n      ]\n    },\n    {\n      \"field_name\": \"Graduation_Date\",\n      \"api_name\": \"Graduation_Date\",\n      \"data_type\": \"date\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"Email_Address\",\n      \"api_name\": \"Email_Address\", \n      \"data_type\": \"email\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"Batch_ID\",\n      \"api_name\": \"Batch_ID\",\n      \"data_type\": \"text\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"Approval_Status\",\n      \"api_name\": \"Approval_Status\",\n      \"data_type\": \"picklist\",\n      \"default\": \"Pending\",\n      \"options\": [\n        \"Pending\",\n        \"Head_Approved\",\n        \"Final_Approved\",\n        \"Rejected\",\n        \"Certificate_Generated\"\n      ]\n    },\n    {\n      \"field_name\": \"Head_Approval_Date\",\n      \"api_name\": \"Head_Approval_Date\",\n      \"data_type\": \"datetime\"\n    },\n    {\n      \"field_name\": \"Founder_Approval_Date\",\n      \"api_name\": \"Founder_Approval_Date\",\n      \"data_type\": \"datetime\"\n    },\n    {\n      \"field_name\": \"Certificate_Generated_Date\",\n      \"api_name\": \"Certificate_Generated_Date\",\n      \"data_type\": \"datetime\"\n    },\n    {\n      \"field_name\": \"Certificate_URL\",\n      \"api_name\": \"Certificate_URL\",\n      \"data_type\": \"url\"\n    }\n  ]\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#certificate-batches-module","title":"Certificate Batches Module","text":"<pre><code>{\n  \"module_name\": \"Certificate_Batches\",\n  \"api_name\": \"Certificate_Batches\",\n  \"fields\": [\n    {\n      \"field_name\": \"Batch_ID\",\n      \"api_name\": \"Batch_ID\",\n      \"data_type\": \"text\",\n      \"required\": true,\n      \"unique\": true\n    },\n    {\n      \"field_name\": \"Batch_Name\",\n      \"api_name\": \"Batch_Name\",\n      \"data_type\": \"text\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"Department\",\n      \"api_name\": \"Department\",\n      \"data_type\": \"picklist\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"Graduation_Date\",\n      \"api_name\": \"Graduation_Date\",\n      \"data_type\": \"date\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"Total_Graduates\",\n      \"api_name\": \"Total_Graduates\",\n      \"data_type\": \"number\",\n      \"required\": true\n    },\n    {\n      \"field_name\": \"Approved_Count\",\n      \"api_name\": \"Approved_Count\",\n      \"data_type\": \"number\",\n      \"default\": 0\n    },\n    {\n      \"field_name\": \"Batch_Status\",\n      \"api_name\": \"Batch_Status\",\n      \"data_type\": \"picklist\",\n      \"default\": \"Processing\",\n      \"options\": [\n        \"Processing\",\n        \"Pending_Head_Approval\",\n        \"Pending_Final_Approval\",\n        \"Approved\",\n        \"Certificates_Generated\",\n        \"Completed\"\n      ]\n    },\n    {\n      \"field_name\": \"Created_By\",\n      \"api_name\": \"Created_By\",\n      \"data_type\": \"lookup\",\n      \"lookup_module\": \"Users\"\n    },\n    {\n      \"field_name\": \"Head_Approver\",\n      \"api_name\": \"Head_Approver\",\n      \"data_type\": \"lookup\",\n      \"lookup_module\": \"Users\"\n    },\n    {\n      \"field_name\": \"Final_Approver\",\n      \"api_name\": \"Final_Approver\",\n      \"data_type\": \"lookup\",\n      \"lookup_module\": \"Users\"\n    }\n  ]\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#322-workflow-rules","title":"3.2.2 Workflow Rules","text":""},{"location":"certificate-automation/technical-documentation/#certificate-id-validation-rule","title":"Certificate ID Validation Rule","text":"<pre><code>{\n  \"rule_name\": \"Validate_Certificate_ID\",\n  \"trigger\": \"on_create\",\n  \"module\": \"Graduate_Records\",\n  \"criteria\": \"Certificate_ID is not null\",\n  \"actions\": [\n    {\n      \"action_type\": \"field_update\",\n      \"condition\": \"Certificate_ID matches pattern LAA\\\\d{4}-\\\\d{3}\",\n      \"success_action\": \"set_field\",\n      \"success_field\": \"ID_Validation_Status\",\n      \"success_value\": \"Valid\"\n    },\n    {\n      \"action_type\": \"field_update\", \n      \"condition\": \"Certificate_ID does not match pattern\",\n      \"error_action\": \"set_field\",\n      \"error_field\": \"ID_Validation_Status\",\n      \"error_value\": \"Invalid\"\n    }\n  ]\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#33-zoho-flow-workflow-specifications","title":"3.3 Zoho Flow Workflow Specifications","text":""},{"location":"certificate-automation/technical-documentation/#331-main-approval-workflow","title":"3.3.1 Main Approval Workflow","text":"<pre><code>workflow_name: \"Certificate_Approval_Process\"\ntrigger:\n  type: \"CRM_Record_Update\"\n  module: \"Graduate_Records\"\n  condition: \"Approval_Status equals 'Pending'\"\n\nflow_steps:\n  - step_1:\n      name: \"Batch_Validation\"\n      type: \"function\"\n      function: \"validate_batch_completeness\"\n      input:\n        batch_id: \"${Graduate_Records.Batch_ID}\"\n      output_variable: \"batch_validation_result\"\n\n  - step_2:\n      name: \"Head_Approval_Notification\"\n      type: \"email\"\n      condition: \"${batch_validation_result.status} == 'complete'\"\n      recipient: \"${Batch.Head_Approver}\"\n      template: \"head_approval_notification\"\n      variables:\n        batch_name: \"${Batch.Batch_Name}\"\n        total_graduates: \"${Batch.Total_Graduates}\"\n        approval_link: \"https://creator.zoho.com/approval-dashboard\"\n\n  - step_3:\n      name: \"Create_Approval_Task\"\n      type: \"zoho_projects\"\n      action: \"create_task\"\n      project_id: \"certificate_approvals\"\n      task_details:\n        name: \"Approve Batch: ${Batch.Batch_Name}\"\n        assignee: \"${Batch.Head_Approver}\"\n        due_date: \"+2 days\"\n        priority: \"High\"\n\n  - step_4:\n      name: \"Wait_For_Head_Approval\"\n      type: \"wait\"\n      condition: \"Graduate_Records.Approval_Status in ['Head_Approved', 'Rejected']\"\n      timeout: \"48 hours\"\n      timeout_action: \"send_reminder\"\n\n  - step_5:\n      name: \"Process_Head_Decision\"\n      type: \"decision\"\n      condition: \"${Graduate_Records.Approval_Status}\"\n      branches:\n        head_approved:\n          condition: \"Head_Approved\"\n          next_step: \"founder_approval_notification\"\n        rejected:\n          condition: \"Rejected\"\n          next_step: \"rejection_notification\"\n\n  - step_6:\n      name: \"Founder_Approval_Notification\"\n      type: \"email\"\n      recipient: \"${Batch.Final_Approver}\"\n      template: \"founder_approval_notification\"\n      variables:\n        batch_name: \"${Batch.Batch_Name}\"\n        head_approver: \"${Batch.Head_Approver}\"\n        head_approval_date: \"${Graduate_Records.Head_Approval_Date}\"\n\n  - step_7:\n      name: \"Wait_For_Final_Approval\"\n      type: \"wait\"\n      condition: \"Graduate_Records.Approval_Status in ['Final_Approved', 'Rejected']\"\n      timeout: \"24 hours\"\n\n  - step_8:\n      name: \"Process_Final_Decision\"\n      type: \"decision\"\n      condition: \"${Graduate_Records.Approval_Status}\"\n      branches:\n        final_approved:\n          condition: \"Final_Approved\"\n          next_step: \"trigger_certificate_generation\"\n        rejected:\n          condition: \"Rejected\"\n          next_step: \"final_rejection_notification\"\n\n  - step_9:\n      name: \"Trigger_Certificate_Generation\"\n      type: \"webhook\"\n      url: \"${certificate_service_endpoint}/generate-certificates\"\n      method: \"POST\"\n      headers:\n        Content-Type: \"application/json\"\n        Authorization: \"Bearer ${certificate_service_token}\"\n      payload:\n        batch_id: \"${Batch.Batch_ID}\"\n        approval_timestamp: \"${now()}\"\n        approvers:\n          head_of_school:\n            name: \"${Batch.Head_Approver}\"\n            timestamp: \"${Graduate_Records.Head_Approval_Date}\"\n          founder:\n            name: \"${Batch.Final_Approver}\"\n            timestamp: \"${Graduate_Records.Founder_Approval_Date}\"\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#4-data-models-and-schemas","title":"4. Data Models and Schemas","text":""},{"location":"certificate-automation/technical-documentation/#41-graduate-record-schema","title":"4.1 Graduate Record Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"title\": \"Graduate Record\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique record identifier\"\n    },\n    \"certificate_id\": {\n      \"type\": \"string\",\n      \"pattern\": \"^LAA\\\\d{4}-\\\\d{3}$\",\n      \"description\": \"Pre-assigned certificate identifier\"\n    },\n    \"graduate_name\": {\n      \"type\": \"string\",\n      \"minLength\": 2,\n      \"maxLength\": 100,\n      \"description\": \"Full name of the graduate\"\n    },\n    \"department\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"Flight Operations\",\n        \"Aviation Engineering\",\n        \"Air Traffic Control\",\n        \"Aircraft Maintenance\", \n        \"Aviation Management\"\n      ]\n    },\n    \"graduation_date\": {\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"description\": \"Date of graduation\"\n    },\n    \"email_address\": {\n      \"type\": \"string\",\n      \"format\": \"email\",\n      \"description\": \"Graduate's email address\"\n    },\n    \"batch_id\": {\n      \"type\": \"string\",\n      \"description\": \"Associated batch identifier\"\n    },\n    \"approval_status\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"Pending\",\n        \"Head_Approved\", \n        \"Final_Approved\",\n        \"Rejected\",\n        \"Certificate_Generated\"\n      ],\n      \"default\": \"Pending\"\n    },\n    \"approval_history\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"approver\": {\"type\": \"string\"},\n          \"action\": {\"type\": \"string\"},\n          \"timestamp\": {\"type\": \"string\", \"format\": \"date-time\"},\n          \"comments\": {\"type\": \"string\"}\n        }\n      }\n    }\n  },\n  \"required\": [\n    \"certificate_id\",\n    \"graduate_name\", \n    \"department\",\n    \"graduation_date\",\n    \"email_address\",\n    \"batch_id\"\n  ]\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#42-certificate-batch-schema","title":"4.2 Certificate Batch Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"title\": \"Certificate Batch\",\n  \"properties\": {\n    \"batch_id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique batch identifier\"\n    },\n    \"batch_name\": {\n      \"type\": \"string\",\n      \"description\": \"Human-readable batch name\"\n    },\n    \"department\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"Flight Operations\",\n        \"Aviation Engineering\",\n        \"Air Traffic Control\",\n        \"Aircraft Maintenance\",\n        \"Aviation Management\"\n      ]\n    },\n    \"graduation_date\": {\n      \"type\": \"string\",\n      \"format\": \"date\"\n    },\n    \"total_graduates\": {\n      \"type\": \"integer\",\n      \"minimum\": 1\n    },\n    \"approved_count\": {\n      \"type\": \"integer\",\n      \"minimum\": 0\n    },\n    \"batch_status\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"Processing\",\n        \"Pending_Head_Approval\",\n        \"Pending_Final_Approval\", \n        \"Approved\",\n        \"Certificates_Generated\",\n        \"Completed\"\n      ]\n    },\n    \"created_by\": {\n      \"type\": \"string\",\n      \"description\": \"User ID of batch creator\"\n    },\n    \"created_date\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"approval_metadata\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"head_approver\": {\"type\": \"string\"},\n        \"head_approval_date\": {\"type\": \"string\", \"format\": \"date-time\"},\n        \"final_approver\": {\"type\": \"string\"},\n        \"final_approval_date\": {\"type\": \"string\", \"format\": \"date-time\"}\n      }\n    }\n  },\n  \"required\": [\n    \"batch_id\",\n    \"batch_name\",\n    \"department\", \n    \"graduation_date\",\n    \"total_graduates\"\n  ]\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#5-api-specifications","title":"5. API Specifications","text":""},{"location":"certificate-automation/technical-documentation/#51-certificate-generation-service-api","title":"5.1 Certificate Generation Service API","text":""},{"location":"certificate-automation/technical-documentation/#511-generate-certificates-endpoint","title":"5.1.1 Generate Certificates Endpoint","text":"<p>Endpoint: <code>POST /api/v1/certificates/generate</code></p> <p>Authentication: Bearer Token</p> <p>Request Headers: <pre><code>Content-Type: application/json\nAuthorization: Bearer {jwt_token}\nX-API-Version: 1.0\nX-Request-ID: {unique_request_id}\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"batch_id\": \"LAA2025-BATCH-001\",\n  \"approval_timestamp\": \"2025-01-31T10:00:00Z\",\n  \"approvers\": {\n    \"head_of_school\": {\n      \"name\": \"John Doe\",\n      \"user_id\": \"hos_001\",\n      \"timestamp\": \"2025-01-30T14:30:00Z\",\n      \"signature_id\": \"hos_sig_001\"\n    },\n    \"founder\": {\n      \"name\": \"Jane Smith\",\n      \"user_id\": \"founder_001\", \n      \"timestamp\": \"2025-01-31T10:00:00Z\",\n      \"signature_id\": \"founder_sig_001\"\n    }\n  },\n  \"graduates\": [\n    {\n      \"certificate_id\": \"LAA2025-001\",\n      \"name\": \"Student Name\",\n      \"department\": \"Flight Operations\",\n      \"graduation_date\": \"2025-06-30\",\n      \"email\": \"student@email.com\",\n      \"template_id\": \"flight_ops_template\"\n    }\n  ],\n  \"template_settings\": {\n    \"format\": \"PDF\",\n    \"include_qr\": true,\n    \"watermark\": true,\n    \"quality\": \"high\"\n  },\n  \"delivery_options\": {\n    \"email_graduates\": true,\n    \"store_certificates\": true,\n    \"generate_batch_zip\": true\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"message\": \"Certificate generation initiated\",\n  \"data\": {\n    \"batch_id\": \"LAA2025-BATCH-001\",\n    \"job_id\": \"cert_job_12345\",\n    \"estimated_completion\": \"2025-01-31T10:15:00Z\",\n    \"total_certificates\": 25,\n    \"status_url\": \"/api/v1/certificates/status/cert_job_12345\"\n  },\n  \"timestamp\": \"2025-01-31T10:00:30Z\"\n}\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#512-certificate-status-endpoint","title":"5.1.2 Certificate Status Endpoint","text":"<p>Endpoint: <code>GET /api/v1/certificates/status/{job_id}</code></p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"data\": {\n    \"job_id\": \"cert_job_12345\",\n    \"batch_id\": \"LAA2025-BATCH-001\",\n    \"status\": \"completed\",\n    \"progress\": {\n      \"total\": 25,\n      \"completed\": 25,\n      \"failed\": 0,\n      \"percentage\": 100\n    },\n    \"results\": {\n      \"certificates_generated\": 25,\n      \"emails_sent\": 25,\n      \"batch_zip_url\": \"https://storage.example.com/batches/LAA2025-BATCH-001.zip\",\n      \"individual_certificates\": [\n        {\n          \"certificate_id\": \"LAA2025-001\",\n          \"status\": \"completed\",\n          \"certificate_url\": \"https://storage.example.com/certificates/LAA2025-001.pdf\",\n          \"email_sent\": true,\n          \"verification_url\": \"https://verify.laa.edu.ng/LAA2025-001\"\n        }\n      ]\n    },\n    \"completion_time\": \"2025-01-31T10:12:45Z\"\n  }\n}\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#52-verification-portal-api","title":"5.2 Verification Portal API","text":""},{"location":"certificate-automation/technical-documentation/#521-certificate-verification-endpoint","title":"5.2.1 Certificate Verification Endpoint","text":"<p>Endpoint: <code>GET /api/v1/verify/{certificate_id}</code></p> <p>Request Parameters: - <code>certificate_id</code>: The certificate identifier (e.g., LAA2025-001) - <code>format</code>: Response format (json|html) - optional, defaults to json</p> <p>Response: <pre><code>{\n  \"status\": \"valid\",\n  \"certificate\": {\n    \"certificate_id\": \"LAA2025-001\",\n    \"graduate_name\": \"John Doe\",\n    \"department\": \"Flight Operations\",\n    \"graduation_date\": \"2025-06-30\",\n    \"issue_date\": \"2025-01-31\",\n    \"verification_status\": \"authentic\",\n    \"issuing_authority\": \"Lagos Aviation Academy\",\n    \"digital_signatures\": [\n      {\n        \"signatory\": \"Head of School\",\n        \"name\": \"Jane Smith\",\n        \"timestamp\": \"2025-01-30T14:30:00Z\",\n        \"verified\": true\n      },\n      {\n        \"signatory\": \"School Founder\", \n        \"name\": \"John Johnson\",\n        \"timestamp\": \"2025-01-31T10:00:00Z\",\n        \"verified\": true\n      }\n    ]\n  },\n  \"verification_metadata\": {\n    \"verified_at\": \"2025-01-31T15:30:00Z\",\n    \"verification_id\": \"verify_12345\",\n    \"ip_address\": \"192.168.1.100\"\n  }\n}\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#6-workflow-implementations","title":"6. Workflow Implementations","text":""},{"location":"certificate-automation/technical-documentation/#61-bulk-upload-processing-workflow","title":"6.1 Bulk Upload Processing Workflow","text":"<pre><code>sequenceDiagram\n    participant Admin as School Admin\n    participant ZF as Zoho Forms\n    participant ZFlow as Zoho Flow\n    participant CRM as Zoho CRM\n    participant Val as Validation Service\n\n    Admin-&gt;&gt;ZF: Upload CSV file\n    ZF-&gt;&gt;ZFlow: Trigger form submission\n    ZFlow-&gt;&gt;Val: Validate CSV structure\n    Val-&gt;&gt;ZFlow: Return validation results\n\n    alt Validation Success\n        ZFlow-&gt;&gt;CRM: Create batch record\n        ZFlow-&gt;&gt;CRM: Create graduate records\n        ZFlow-&gt;&gt;Admin: Send success notification\n        ZFlow-&gt;&gt;ZFlow: Trigger approval workflow\n    else Validation Failure\n        ZFlow-&gt;&gt;Admin: Send error report\n        ZFlow-&gt;&gt;Admin: Request data correction\n    end</code></pre>"},{"location":"certificate-automation/technical-documentation/#62-approval-workflow-implementation","title":"6.2 Approval Workflow Implementation","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Pending\n    Pending --&gt; Processing: Batch Complete\n    Processing --&gt; HeadReview: Notify Head of School\n    HeadReview --&gt; HeadApproved: Approve\n    HeadReview --&gt; Rejected: Reject\n    HeadApproved --&gt; FounderReview: Notify Founder\n    FounderReview --&gt; FinalApproved: Final Approve\n    FounderReview --&gt; Rejected: Reject\n    FinalApproved --&gt; CertificateGeneration: Trigger Generation\n    CertificateGeneration --&gt; Completed: Success\n    Rejected --&gt; [*]: Notify Admin\n    Completed --&gt; [*]</code></pre>"},{"location":"certificate-automation/technical-documentation/#63-certificate-generation-workflow","title":"6.3 Certificate Generation Workflow","text":"<pre><code>sequenceDiagram\n    participant ZFlow as Zoho Flow\n    participant CertAPI as Certificate API\n    participant Template as Template Engine\n    participant Sign as Digital Signature\n    participant Storage as File Storage\n    participant Email as Email Service\n    participant CRM as Zoho CRM\n\n    ZFlow-&gt;&gt;CertAPI: POST /generate-certificates\n    CertAPI-&gt;&gt;Template: Process certificate templates\n    Template-&gt;&gt;Sign: Apply digital signatures\n    Sign-&gt;&gt;Storage: Store signed certificates\n    Storage-&gt;&gt;Email: Send certificates to graduates\n    Email-&gt;&gt;CRM: Update delivery status\n    CertAPI-&gt;&gt;ZFlow: Return completion status</code></pre>"},{"location":"certificate-automation/technical-documentation/#7-security-and-compliance","title":"7. Security and Compliance","text":""},{"location":"certificate-automation/technical-documentation/#71-authentication-and-authorization","title":"7.1 Authentication and Authorization","text":""},{"location":"certificate-automation/technical-documentation/#711-oauth-20-configuration","title":"7.1.1 OAuth 2.0 Configuration","text":"<pre><code>{\n  \"oauth_config\": {\n    \"provider\": \"Zoho\",\n    \"client_id\": \"${ZOHO_CLIENT_ID}\",\n    \"client_secret\": \"${ZOHO_CLIENT_SECRET}\",\n    \"scope\": [\n      \"ZohoCRM.modules.ALL\",\n      \"ZohoFlow.flows.ALL\", \n      \"ZohoSign.documents.ALL\",\n      \"ZohoCreator.applications.ALL\"\n    ],\n    \"redirect_uri\": \"https://certificates.laa.edu.ng/oauth/callback\",\n    \"token_endpoint\": \"https://accounts.zoho.com/oauth/v2/token\",\n    \"refresh_token_rotation\": true,\n    \"token_expiry\": 3600\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#712-role-based-access-control-rbac","title":"7.1.2 Role-Based Access Control (RBAC)","text":"<pre><code>{\n  \"roles\": {\n    \"school_admin\": {\n      \"permissions\": [\n        \"upload_graduate_data\",\n        \"manage_templates\",\n        \"view_all_batches\",\n        \"resubmit_rejected\",\n        \"access_audit_logs\"\n      ],\n      \"zoho_modules\": [\n        \"Graduate_Records:CREATE,READ,UPDATE\",\n        \"Certificate_Batches:CREATE,READ,UPDATE\"\n      ]\n    },\n    \"head_of_school\": {\n      \"permissions\": [\n        \"approve_batches\",\n        \"reject_batches\", \n        \"view_approval_dashboard\",\n        \"add_approval_comments\"\n      ],\n      \"zoho_modules\": [\n        \"Graduate_Records:READ,UPDATE\",\n        \"Certificate_Batches:READ,UPDATE\"\n      ]\n    },\n    \"school_founder\": {\n      \"permissions\": [\n        \"final_approve_batches\",\n        \"final_reject_batches\",\n        \"manage_digital_signatures\",\n        \"access_executive_dashboard\"\n      ],\n      \"zoho_modules\": [\n        \"Graduate_Records:READ,UPDATE\",\n        \"Certificate_Batches:READ,UPDATE\"\n      ]\n    },\n    \"it_support\": {\n      \"permissions\": [\n        \"manage_system_config\",\n        \"access_all_logs\",\n        \"manage_user_accounts\",\n        \"system_maintenance\"\n      ],\n      \"zoho_modules\": [\n        \"ALL:ALL\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#72-data-encryption","title":"7.2 Data Encryption","text":""},{"location":"certificate-automation/technical-documentation/#721-encryption-standards","title":"7.2.1 Encryption Standards","text":"<ul> <li>Data at Rest: AES-256 encryption</li> <li>Data in Transit: TLS 1.3</li> <li>Database: Field-level encryption for sensitive data</li> <li>File Storage: Server-side encryption with customer-managed keys</li> </ul>"},{"location":"certificate-automation/technical-documentation/#722-key-management","title":"7.2.2 Key Management","text":"<pre><code>{\n  \"key_management\": {\n    \"provider\": \"Zoho Vault\",\n    \"encryption_keys\": {\n      \"graduate_data\": {\n        \"algorithm\": \"AES-256-GCM\",\n        \"rotation_period\": \"90 days\",\n        \"backup_copies\n\": 3\n      },\n      \"certificate_signatures\": {\n        \"algorithm\": \"RSA-4096\",\n        \"rotation_period\": \"365 days\",\n        \"backup_copies\": 5\n      }\n    },\n    \"access_controls\": {\n      \"key_access_logging\": true,\n      \"multi_factor_authentication\": true,\n      \"key_usage_monitoring\": true\n    }\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#73-digital-signature-security","title":"7.3 Digital Signature Security","text":""},{"location":"certificate-automation/technical-documentation/#731-signature-management","title":"7.3.1 Signature Management","text":"<pre><code>{\n  \"digital_signatures\": {\n    \"storage\": {\n      \"provider\": \"Zoho Sign Vault\",\n      \"encryption\": \"AES-256\",\n      \"access_control\": \"role_based\"\n    },\n    \"signature_types\": {\n      \"head_of_school\": {\n        \"certificate_type\": \"X.509\",\n        \"key_length\": 4096,\n        \"validity_period\": \"2 years\",\n        \"usage_tracking\": true\n      },\n      \"school_founder\": {\n        \"certificate_type\": \"X.509\", \n        \"key_length\": 4096,\n        \"validity_period\": \"2 years\",\n        \"usage_tracking\": true\n      }\n    },\n    \"security_measures\": {\n      \"tamper_detection\": true,\n      \"timestamp_authority\": \"RFC 3161 compliant\",\n      \"signature_validation\": \"automatic\",\n      \"revocation_checking\": true\n    }\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#74-audit-and-compliance","title":"7.4 Audit and Compliance","text":""},{"location":"certificate-automation/technical-documentation/#741-audit-trail-requirements","title":"7.4.1 Audit Trail Requirements","text":"<pre><code>{\n  \"audit_trail\": {\n    \"events_logged\": [\n      \"user_authentication\",\n      \"data_upload\",\n      \"approval_actions\",\n      \"certificate_generation\",\n      \"signature_application\",\n      \"certificate_access\",\n      \"system_configuration_changes\"\n    ],\n    \"log_format\": {\n      \"timestamp\": \"ISO 8601 UTC\",\n      \"user_id\": \"string\",\n      \"action\": \"string\",\n      \"resource\": \"string\",\n      \"ip_address\": \"string\",\n      \"user_agent\": \"string\",\n      \"result\": \"success|failure\",\n      \"details\": \"object\"\n    },\n    \"retention_policy\": {\n      \"audit_logs\": \"7 years\",\n      \"certificate_records\": \"permanent\",\n      \"approval_history\": \"permanent\"\n    }\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#75-data-privacy-and-gdpr-compliance","title":"7.5 Data Privacy and GDPR Compliance","text":""},{"location":"certificate-automation/technical-documentation/#751-data-processing-principles","title":"7.5.1 Data Processing Principles","text":"<ul> <li>Lawfulness: Processing based on legitimate educational interests</li> <li>Purpose Limitation: Data used only for certificate generation and verification</li> <li>Data Minimization: Only necessary graduate information collected</li> <li>Accuracy: Data validation and correction mechanisms</li> <li>Storage Limitation: Retention policies aligned with educational requirements</li> <li>Security: Comprehensive technical and organizational measures</li> </ul>"},{"location":"certificate-automation/technical-documentation/#752-data-subject-rights-implementation","title":"7.5.2 Data Subject Rights Implementation","text":"<pre><code>{\n  \"data_subject_rights\": {\n    \"right_of_access\": {\n      \"implementation\": \"Self-service portal for graduates\",\n      \"response_time\": \"30 days\",\n      \"data_format\": \"structured, machine-readable\"\n    },\n    \"right_to_rectification\": {\n      \"implementation\": \"Admin interface for data corrections\",\n      \"approval_required\": true,\n      \"audit_trail\": true\n    },\n    \"right_to_erasure\": {\n      \"implementation\": \"Controlled deletion with legal basis verification\",\n      \"exceptions\": \"Legal obligations, public interest\",\n      \"approval_required\": true\n    },\n    \"right_to_portability\": {\n      \"implementation\": \"Export functionality in common formats\",\n      \"formats\": [\"JSON\", \"CSV\", \"PDF\"],\n      \"automated\": true\n    }\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#8-deployment-guide","title":"8. Deployment Guide","text":""},{"location":"certificate-automation/technical-documentation/#81-prerequisites","title":"8.1 Prerequisites","text":""},{"location":"certificate-automation/technical-documentation/#811-zoho-account-requirements","title":"8.1.1 Zoho Account Requirements","text":"<ul> <li>Zoho One License: Enterprise edition recommended</li> <li>Required Applications:</li> <li>Zoho CRM (Professional or Enterprise)</li> <li>Zoho Flow (Premium)</li> <li>Zoho Forms (Professional)</li> <li>Zoho Creator (Professional)</li> <li>Zoho Sign (Professional)</li> <li>Zoho Analytics (Professional)</li> </ul>"},{"location":"certificate-automation/technical-documentation/#812-technical-requirements","title":"8.1.2 Technical Requirements","text":"<pre><code>{\n  \"infrastructure\": {\n    \"certificate_service\": {\n      \"server_specs\": {\n        \"cpu\": \"4 cores minimum\",\n        \"memory\": \"8GB RAM minimum\",\n        \"storage\": \"100GB SSD\",\n        \"network\": \"1Gbps connection\"\n      },\n      \"software_requirements\": {\n        \"os\": \"Ubuntu 20.04 LTS or CentOS 8\",\n        \"runtime\": \"Node.js 18+ or Python 3.9+\",\n        \"database\": \"PostgreSQL 13+ or MongoDB 5+\",\n        \"web_server\": \"Nginx 1.20+\"\n      }\n    },\n    \"verification_portal\": {\n      \"hosting\": \"Cloud hosting (AWS, Azure, GCP)\",\n      \"cdn\": \"CloudFlare or AWS CloudFront\",\n      \"ssl_certificate\": \"Let's Encrypt or commercial SSL\"\n    }\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#82-installation-steps","title":"8.2 Installation Steps","text":""},{"location":"certificate-automation/technical-documentation/#821-phase-1-zoho-configuration","title":"8.2.1 Phase 1: Zoho Configuration","text":"<p>Step 1: CRM Module Setup <pre><code># Create custom modules using Zoho CRM API\ncurl -X POST \"https://www.zohoapis.com/crm/v2/settings/modules\" \\\n  -H \"Authorization: Zoho-oauthtoken {access_token}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @graduate_records_module.json\n\ncurl -X POST \"https://www.zohoapis.com/crm/v2/settings/modules\" \\\n  -H \"Authorization: Zoho-oauthtoken {access_token}\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @certificate_batches_module.json\n</code></pre></p> <p>Step 2: Zoho Forms Configuration 1. Navigate to Zoho Forms dashboard 2. Create new form using provided JSON specification 3. Configure file upload settings and validation rules 4. Set up form submission webhooks to Zoho Flow</p> <p>Step 3: Zoho Flow Workflow Setup 1. Import workflow templates from provided YAML files 2. Configure connection credentials for all integrated services 3. Set up environment variables and API endpoints 4. Test workflow triggers and actions</p>"},{"location":"certificate-automation/technical-documentation/#822-phase-2-certificate-service-deployment-laravel","title":"8.2.2 Phase 2: Certificate Service Deployment (Laravel)","text":"<p>Step 1: Server Setup <pre><code># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install PHP 8.1 and required extensions\nsudo apt install software-properties-common -y\nsudo add-apt-repository ppa:ondrej/php -y\nsudo apt update\nsudo apt install php8.1 php8.1-fpm php8.1-mysql php8.1-pgsql php8.1-xml php8.1-curl php8.1-zip php8.1-mbstring php8.1-gd php8.1-bcmath php8.1-intl php8.1-redis -y\n\n# Install Composer\ncurl -sS https://getcomposer.org/installer | php\nsudo mv composer.phar /usr/local/bin/composer\nsudo chmod +x /usr/local/bin/composer\n\n# Install PostgreSQL\nsudo apt install postgresql postgresql-contrib -y\n\n# Install Redis for caching and queues\nsudo apt install redis-server -y\n\n# Install Nginx\nsudo apt install nginx -y\n\n# Install Supervisor for queue management\nsudo apt install supervisor -y\n</code></pre></p> <p>Step 2: Laravel Application Deployment <pre><code># Clone certificate service repository\ngit clone https://github.com/laa/certificate-automation-service.git\ncd certificate-automation-service\n\n# Install PHP dependencies\ncomposer install --optimize-autoloader --no-dev\n\n# Configure environment variables\ncp .env.example .env\nnano .env\n\n# Generate application key\nphp artisan key:generate\n\n# Database setup\nphp artisan migrate --force\nphp artisan db:seed --force\n\n# Create storage symlink\nphp artisan storage:link\n\n# Cache configuration for production\nphp artisan config:cache\nphp artisan route:cache\nphp artisan view:cache\n\n# Set proper permissions\nsudo chown -R www-data:www-data storage bootstrap/cache\nsudo chmod -R 775 storage bootstrap/cache\n</code></pre></p> <p>Step 3: Queue Worker Configuration <pre><code># Create supervisor configuration for Laravel queues\nsudo nano /etc/supervisor/conf.d/certificate-worker.conf\n</code></pre></p> <pre><code>[program:certificate-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /var/www/certificate-automation-service/artisan queue:work redis --sleep=3 --tries=3 --max-time=3600\nautostart=true\nautorestart=true\nstopasgroup=true\nkillasgroup=true\nuser=www-data\nnumprocs=4\nredirect_stderr=true\nstdout_logfile=/var/www/certificate-automation-service/storage/logs/worker.log\nstopwaitsecs=3600\n</code></pre> <pre><code># Update supervisor and start workers\nsudo supervisorctl reread\nsudo supervisorctl update\nsudo supervisorctl start certificate-worker:*\n</code></pre> <p>Step 4: Nginx Configuration for Laravel <pre><code>server {\n    listen 80;\n    server_name certificates-api.laa.edu.ng;\n    root /var/www/certificate-automation-service/public;\n    index index.php index.html index.htm;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n\n    # Handle Laravel routes\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    # PHP-FPM configuration\n    location ~ \\.php$ {\n        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        include fastcgi_params;\n        fastcgi_hide_header X-Powered-By;\n    }\n\n    # Deny access to sensitive files\n    location ~ /\\.(?!well-known).* {\n        deny all;\n    }\n\n    # Static file caching\n    location ~* \\.(jpg|jpeg|png|gif|ico|css|js)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied expired no-cache no-store private must-revalidate auth;\n    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;\n\n    # Rate limiting\n    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;\n    location /api/ {\n        limit_req zone=api burst=20 nodelay;\n    }\n}\n```&lt;/search&gt;\n\n#### 8.2.3 Phase 3: Verification Portal Setup\n\n**Step 1: Frontend Deployment**\n```bash\n# Clone verification portal repository\ngit clone https://github.com/laa/certificate-verification-portal.git\ncd certificate-verification-portal\n\n# Install dependencies\nnpm install\n\n# Configure environment\ncp .env.example .env\nnano .env\n\n# Build for production\nnpm run build\n\n# Deploy to web server\nsudo cp -r dist/* /var/www/verify.laa.edu.ng/\n</code></pre></p> <p>Step 2: SSL Certificate Setup <pre><code># Install Certbot\nsudo apt install certbot python3-certbot-nginx -y\n\n# Obtain SSL certificates\nsudo certbot --nginx -d certificates-api.laa.edu.ng\nsudo certbot --nginx -d verify.laa.edu.ng\n\n# Set up auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#83-configuration-management","title":"8.3 Configuration Management","text":""},{"location":"certificate-automation/technical-documentation/#831-laravel-environment-variables","title":"8.3.1 Laravel Environment Variables","text":"<pre><code># Laravel Application Configuration\nAPP_NAME=\"Certificate Automation Service\"\nAPP_ENV=production\nAPP_KEY=base64:your_generated_app_key\nAPP_DEBUG=false\nAPP_URL=https://certificates-api.laa.edu.ng\n\n# Database Configuration\nDB_CONNECTION=pgsql\nDB_HOST=localhost\nDB_PORT=5432\nDB_DATABASE=certificates\nDB_USERNAME=cert_user\nDB_PASSWORD=secure_password\n\n# Redis Configuration\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\n# Queue Configuration\nQUEUE_CONNECTION=redis\nQUEUE_FAILED_DRIVER=database\n\n# Cache Configuration\nCACHE_DRIVER=redis\nSESSION_DRIVER=redis\n\n# Mail Configuration\nMAIL_MAILER=smtp\nMAIL_HOST=smtp.zoho.com\nMAIL_PORT=587\nMAIL_USERNAME=certificates@laa.edu.ng\nMAIL_PASSWORD=your_email_password\nMAIL_ENCRYPTION=tls\nMAIL_FROM_ADDRESS=certificates@laa.edu.ng\nMAIL_FROM_NAME=\"Lagos Aviation Academy\"\n\n# Zoho Integration\nZOHO_CLIENT_ID=your_client_id\nZOHO_CLIENT_SECRET=your_client_secret\nZOHO_REFRESH_TOKEN=your_refresh_token\nZOHO_API_DOMAIN=https://www.zohoapis.com\n\n# AWS S3 Configuration\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=laa-certificates\nAWS_USE_PATH_STYLE_ENDPOINT=false\n\n# Filesystem Configuration\nFILESYSTEM_DISK=s3\n\n# Logging Configuration\nLOG_CHANNEL=stack\nLOG_DEPRECATIONS_CHANNEL=null\nLOG_LEVEL=info\n\n# Security Configuration\nBCRYPT_ROUNDS=12\nSANCTUM_STATEFUL_DOMAINS=certificates-api.laa.edu.ng\nSESSION_LIFETIME=120\n\n# Certificate Generation Settings\nCERTIFICATE_TEMPLATE_PATH=/var/www/certificate-automation-service/storage/templates\nCERTIFICATE_OUTPUT_PATH=/var/www/certificate-automation-service/storage/certificates\nCERTIFICATE_BATCH_SIZE=50\nCERTIFICATE_GENERATION_TIMEOUT=300\n\n# Digital Signature Settings\nZOHO_SIGN_API_URL=https://sign.zoho.com/api/v1\nSIGNATURE_VALIDATION_ENABLED=true\n```&lt;/search&gt;\n\n#### 8.3.2 Database Configuration\n```sql\n-- Create database and user\nCREATE DATABASE certificates;\nCREATE USER cert_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE certificates TO cert_user;\n\n-- Configure connection pooling\nALTER SYSTEM SET max_connections = 200;\nALTER SYSTEM SET shared_buffers = '256MB';\nALTER SYSTEM SET effective_cache_size = '1GB';\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#84-testing-and-validation","title":"8.4 Testing and Validation","text":""},{"location":"certificate-automation/technical-documentation/#841-laravel-system-integration-tests","title":"8.4.1 Laravel System Integration Tests","text":"<pre><code># Run Laravel test suite\nphp artisan test\n\n# Run specific feature tests\nphp artisan test --filter CertificateGenerationTest\n\n# Test database connections\nphp artisan tinker\n&gt;&gt;&gt; DB::connection()-&gt;getPdo();\n\n# Test queue workers\nphp artisan queue:work --once\n\n# Test Zoho Flow workflows\ncurl -X POST \"https://flow.zoho.com/api/v1/flows/test\" \\\n  -H \"Authorization: Bearer {token}\" \\\n  -d '{\"workflow_id\": \"certificate_approval_process\"}'\n\n# Validate certificate generation API\ncurl -X POST \"https://certificates-api.laa.edu.ng/api/v1/certificates/generate\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer {token}\" \\\n  -d @test_batch.json\n\n# Test Laravel scheduler\nphp artisan schedule:run\n\n# Validate storage permissions\nphp artisan storage:link\nls -la storage/\n```&lt;/search&gt;\n\n#### 8.4.2 Security Validation\n```bash\n# SSL certificate validation\nopenssl s_client -connect certificates-api.laa.edu.ng:443 -servername certificates-api.laa.edu.ng\n\n# API security scan\nnmap -sV -sC certificates-api.laa.edu.ng\n\n# Database security check\nsudo -u postgres psql -c \"\\du\"\nsudo -u postgres psql -c \"SELECT * FROM pg_stat_ssl;\"\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#9-monitoring-and-maintenance","title":"9. Monitoring and Maintenance","text":""},{"location":"certificate-automation/technical-documentation/#91-system-monitoring","title":"9.1 System Monitoring","text":""},{"location":"certificate-automation/technical-documentation/#911-key-performance-indicators-kpis","title":"9.1.1 Key Performance Indicators (KPIs)","text":"<pre><code>{\n  \"performance_metrics\": {\n    \"certificate_generation\": {\n      \"average_processing_time\": \"&lt; 2 minutes per certificate\",\n      \"batch_completion_time\": \"&lt; 15 minutes for 100 certificates\",\n      \"success_rate\": \"&gt; 99.5%\",\n      \"error_rate\": \"&lt; 0.5%\"\n    },\n    \"approval_workflow\": {\n      \"average_approval_time\": \"&lt; 24 hours per stage\",\n      \"workflow_completion_rate\": \"&gt; 95%\",\n      \"notification_delivery_rate\": \"&gt; 99%\"\n    },\n    \"system_performance\": {\n      \"api_response_time\": \"&lt; 500ms for 95th percentile\",\n      \"uptime\": \"&gt; 99.9%\",\n      \"concurrent_users\": \"Support 100+ simultaneous users\"\n    }\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#912-monitoring-dashboard-configuration","title":"9.1.2 Monitoring Dashboard Configuration","text":"<pre><code>{\n  \"zoho_analytics_dashboard\": {\n    \"widgets\": [\n      {\n        \"name\": \"Certificate Generation Status\",\n        \"type\": \"pie_chart\",\n        \"data_source\": \"Certificate_Batches\",\n        \"metrics\": [\"Batch_Status\"],\n        \"refresh_interval\": \"5 minutes\"\n      },\n      {\n        \"name\": \"Processing Time Trends\",\n        \"type\": \"line_chart\",\n        \"data_source\": \"Graduate_Records\",\n        \"metrics\": [\"Certificate_Generated_Date\", \"Founder_Approval_Date\"],\n        \"refresh_interval\": \"15 minutes\"\n      },\n      {\n        \"name\": \"Error Rate Monitor\",\n        \"type\": \"gauge\",\n        \"data_source\": \"System_Logs\",\n        \"metrics\": [\"error_count\", \"total_requests\"],\n        \"alert_threshold\": \"1%\"\n      },\n      {\n        \"name\": \"User Activity\",\n        \"type\": \"bar_chart\",\n        \"data_source\": \"Audit_Logs\",\n        \"metrics\": [\"user_actions_by_role\"],\n        \"refresh_interval\": \"30 minutes\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#913-alert-configuration","title":"9.1.3 Alert Configuration","text":"<pre><code>{\n  \"alert_rules\": {\n    \"critical_alerts\": [\n      {\n        \"name\": \"Certificate Service Down\",\n        \"condition\": \"api_health_check_failure &gt; 2 consecutive\",\n        \"notification\": [\"email\", \"sms\"],\n        \"recipients\": [\"it_support\", \"system_admin\"]\n      },\n      {\n        \"name\": \"High Error Rate\",\n        \"condition\": \"error_rate &gt; 5% over 10 minutes\",\n        \"notification\": [\"email\", \"slack\"],\n        \"recipients\": [\"development_team\", \"it_support\"]\n      }\n    ],\n    \"warning_alerts\": [\n      {\n        \"name\": \"Slow Response Time\",\n        \"condition\": \"avg_response_time &gt; 2 seconds over 15 minutes\",\n        \"notification\": [\"email\"],\n        \"recipients\": [\"it_support\"]\n      },\n      {\n        \"name\": \"Approval Delay\",\n        \"condition\": \"pending_approvals &gt; 48 hours\",\n        \"notification\": [\"email\"],\n        \"recipients\": [\"head_of_school\", \"school_founder\"]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#92-maintenance-procedures","title":"9.2 Maintenance Procedures","text":""},{"location":"certificate-automation/technical-documentation/#921-regular-maintenance-tasks","title":"9.2.1 Regular Maintenance Tasks","text":"<p>Daily Tasks: <pre><code>#!/bin/bash\n# Daily maintenance script\n\n# Check system health\ncurl -f http://localhost:3000/health || echo \"API health check failed\"\n\n# Verify database connections\npsql -h localhost -U cert_user -d certificates -c \"SELECT 1;\" || echo \"Database connection failed\"\n\n# Check disk space\ndf -h | grep -E \"(80%|90%|100%)\" &amp;&amp; echo \"Disk space warning\"\n\n# Review error logs\ntail -n 100 /var/log/certificate-service/error.log | grep -i error\n\n# Backup verification\nls -la /backups/$(date +%Y-%m-%d)* || echo \"Backup verification failed\"\n</code></pre></p> <p>Weekly Tasks: <pre><code>#!/bin/bash\n# Weekly maintenance script\n\n# Update system packages\nsudo apt update &amp;&amp; sudo apt list --upgradable\n\n# Certificate expiry check\nopenssl x509 -in /etc/ssl/certs/laa-certificates.crt -noout -dates\n\n# Database maintenance\npsql -h localhost -U cert_user -d certificates -c \"VACUUM ANALYZE;\"\n\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/certificate-service\n\n# Performance report generation\nnode scripts/generate-weekly-report.js\n</code></pre></p> <p>Monthly Tasks: <pre><code>#!/bin/bash\n# Monthly maintenance script\n\n# Security updates\nsudo apt upgrade -y\n\n# SSL certificate renewal check\nsudo certbot renew --dry-run\n\n# Database backup verification\npg_dump -h localhost -U cert_user certificates &gt; /tmp/test-restore.sql\npsql -h localhost -U cert_user test_db &lt; /tmp/test-restore.sql\n\n# Audit log review\nnode scripts/audit-log-analysis.js --month=$(date +%Y-%m)\n\n# Performance optimization\nnode scripts/database-optimization.js\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#922-backup-and-recovery","title":"9.2.2 Backup and Recovery","text":"<p>Backup Strategy: <pre><code>{\n  \"backup_configuration\": {\n    \"database_backups\": {\n      \"frequency\": \"daily\",\n      \"retention\": \"30 days\",\n      \"location\": \"AWS S3\",\n      \"encryption\": \"AES-256\",\n      \"verification\": \"automated restore test\"\n    },\n    \"file_backups\": {\n      \"certificates\": {\n        \"frequency\": \"real-time\",\n        \"location\": \"AWS S3 with versioning\",\n        \"retention\": \"permanent\"\n      },\n      \"templates\": {\n        \"frequency\": \"on change\",\n        \"location\": \"Git repository + S3\",\n        \"retention\": \"permanent\"\n      },\n      \"configuration\": {\n        \"frequency\": \"on change\",\n        \"location\": \"Git repository\",\n        \"retention\": \"permanent\"\n      }\n    }\n  }\n}\n</code></pre></p> <p>Recovery Procedures: <pre><code>#!/bin/bash\n# Database recovery script\n\n# Stop application\npm2 stop certificate-service\n\n# Restore database from backup\npg_restore -h localhost -U cert_user -d certificates /backups/certificates-$(date +%Y-%m-%d).dump\n\n# Verify data integrity\npsql -h localhost -U cert_user -d certificates -c \"SELECT COUNT(*) FROM graduate_records;\"\n\n# Restart application\npm2 start certificate-service\n\n# Verify system functionality\ncurl -f http://localhost:3000/health\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#93-performance-optimization","title":"9.3 Performance Optimization","text":""},{"location":"certificate-automation/technical-documentation/#931-database-optimization","title":"9.3.1 Database Optimization","text":"<pre><code>-- Index optimization for frequently queried fields\nCREATE INDEX CONCURRENTLY idx_graduate_records_certificate_id ON graduate_records(certificate_id);\nCREATE INDEX CONCURRENTLY idx_graduate_records_batch_id ON graduate_records(batch_id);\nCREATE INDEX CONCURRENTLY idx_graduate_records_approval_status ON graduate_records(approval_status);\nCREATE INDEX CONCURRENTLY idx_certificate_batches_status ON certificate_batches(batch_status);\n\n-- Partitioning for large tables\nCREATE TABLE graduate_records_2025 PARTITION OF graduate_records\nFOR VALUES FROM ('2025-01-01') TO ('2026-01-01');\n\n-- Query optimization\nEXPLAIN ANALYZE SELECT * FROM graduate_records WHERE certificate_id = 'LAA2025-001';\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#932-application-performance-tuning","title":"9.3.2 Application Performance Tuning","text":"<pre><code>// Connection pooling configuration\nconst pool = new Pool({\n  host: process.env.DB_HOST,\n  port: process.env.DB_PORT,\n  database: process.env.DB_NAME,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  max: 20, // Maximum number of connections\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n\n// Caching configuration\nconst redis = new Redis({\n  host: process.env.REDIS_HOST,\n  port: process.env.REDIS_PORT,\n  retryDelayOnFailover: 100,\n  maxRetriesPerRequest: 3,\n});\n\n// Rate limiting\nconst rateLimit = require('express-rate-limit');\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP'\n});\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#10-troubleshooting-guide","title":"10. Troubleshooting Guide","text":""},{"location":"certificate-automation/technical-documentation/#101-common-issues-and-solutions","title":"10.1 Common Issues and Solutions","text":""},{"location":"certificate-automation/technical-documentation/#1011-certificate-generation-failures","title":"10.1.1 Certificate Generation Failures","text":"<p>Issue: Certificate generation fails with template processing error <pre><code>Error: Template processing failed - Missing placeholder data\n</code></pre></p> <p>Diagnosis Steps: 1. Check graduate record completeness in CRM 2. Verify template placeholder mappings 3. Review certificate service logs</p> <p>Solution: <pre><code># Check graduate record data\ncurl -X GET \"https://www.zohoapis.com/crm/v2/Graduate_Records/{record_id}\" \\\n  -H \"Authorization: Zoho-oauthtoken {token}\"\n\n# Validate template placeholders\nnode scripts/validate-template.js --template-id flight_ops_template\n\n# Regenerate failed certificates\ncurl -X POST \"http://localhost:3000/api/v1/certificates/regenerate\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"certificate_ids\": [\"LAA2025-001\", \"LAA2025-002\"]}'\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#1012-approval-workflow-stuck","title":"10.1.2 Approval Workflow Stuck","text":"<p>Issue: Approval workflow not progressing after approval action <pre><code>Error: Workflow execution timeout - Step 'founder_approval_notification' failed\n</code></pre></p> <p>Diagnosis Steps: 1. Check Zoho Flow execution logs 2. Verify user permissions and roles 3. Test email notification delivery</p> <p>Solution: <pre><code># Check workflow status\ncurl -X GET \"https://flow.zoho.com/api/v1/flows/{flow_id}/executions\" \\\n  -H \"Authorization: Bearer {token}\"\n\n# Manually trigger next workflow step\ncurl -X POST \"https://flow.zoho.com/api/v1/flows/{flow_id}/trigger\" \\\n  -H \"Authorization: Bearer {token}\" \\\n  -d '{\"step\": \"founder_approval_notification\", \"data\": {...}}'\n\n# Reset workflow state\nnode scripts/reset-workflow-state.js --batch-id LAA2025-BATCH-001\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#1013-database-connection-issues","title":"10.1.3 Database Connection Issues","text":"<p>Issue: Application cannot connect to database <pre><code>Error: Connection terminated unexpectedly\n</code></pre></p> <p>Diagnosis Steps: 1. Check database server status 2. Verify connection credentials 3. Test network connectivity</p> <p>Solution: <pre><code># Check PostgreSQL status\nsudo systemctl status postgresql\n\n# Test database connection\npsql -h localhost -U cert_user -d certificates -c \"SELECT version();\"\n\n# Check connection pool status\nnode scripts/check-db-connections.js\n\n# Restart database if necessary\nsudo systemctl restart postgresql\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#102-error-code-reference","title":"10.2 Error Code Reference","text":""},{"location":"certificate-automation/technical-documentation/#1021-api-error-codes","title":"10.2.1 API Error Codes","text":"<pre><code>{\n  \"error_codes\": {\n    \"1001\": {\n      \"message\": \"Invalid certificate ID format\",\n      \"solution\": \"Ensure certificate ID follows pattern LAA{YEAR}-{NUMBER}\"\n    },\n    \"1002\": {\n      \"message\": \"Graduate record not found\",\n      \"solution\": \"Verify record exists in CRM and sync data\"\n    },\n    \"1003\": {\n      \"message\": \"Template processing failed\",\n      \"solution\": \"Check template file and placeholder mappings\"\n    },\n    \"1004\": {\n      \"message\": \"Digital signature failed\",\n      \"solution\": \"Verify signature certificates and Zoho Sign integration\"\n    },\n    \"1005\": {\n      \"message\": \"Email delivery failed\",\n      \"solution\": \"Check email service configuration and recipient address\"\n    },\n    \"2001\": {\n      \"message\": \"Approval workflow timeout\",\n      \"solution\": \"Check approver availability and notification delivery\"\n    },\n    \"2002\": {\n      \"message\": \"Insufficient permissions\",\n      \"solution\": \"Verify user role and permissions in Zoho CRM\"\n    },\n    \"3001\": {\n      \"message\": \"Database connection failed\",\n      \"solution\": \"Check database server status and connection credentials\"\n    },\n    \"3002\": {\n      \"message\": \"File storage error\",\n      \"solution\": \"Verify AWS S3 credentials and bucket permissions\"\n    }\n  }\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#103-performance-troubleshooting","title":"10.3 Performance Troubleshooting","text":""},{"location":"certificate-automation/technical-documentation/#1031-slow-certificate-generation","title":"10.3.1 Slow Certificate Generation","text":"<p>Symptoms: - Certificate generation taking &gt; 5 minutes per certificate - High CPU usage on certificate service - Memory usage continuously increasing</p> <p>Diagnosis: <pre><code># Check system resources\ntop -p $(pgrep -f certificate-service)\nfree -h\ndf -h\n\n# Analyze slow queries\npsql -h localhost -U cert_user -d certificates -c \"\nSELECT query, mean_time, calls \nFROM pg_stat_statements \nORDER BY mean_time DESC \nLIMIT 10;\"\n\n# Check application logs for bottlenecks\ngrep -i \"slow\\|timeout\\|memory\" /var/log/certificate-service/app.log\n</code></pre></p> <p>Solutions: <pre><code># Optimize database queries\nnode scripts/optimize-queries.js\n\n# Increase memory allocation\nexport NODE_OPTIONS=\"--max-old-space-size=4096\"\npm2 restart certificate-service\n\n# Scale horizontally\npm2 scale certificate-service +2\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#1032-high-api-response-times","title":"10.3.2 High API Response Times","text":"<p>Symptoms: - API responses &gt; 2 seconds - Timeout errors from Zoho Flow - User complaints about slow dashboard loading</p> <p>Diagnosis: <pre><code># Monitor API response times\ncurl -w \"@curl-format.txt\" -o /dev/null -s \"http://localhost:3000/api/v1/certificates/status/test\"\n\n# Check database performance\npsql -h localhost -U cert_user -d certificates -c \"\nSELECT schemaname, tablename, attname, n_distinct, correlation \nFROM pg_stats \nWHERE schemaname = 'public';\"\n\n# Analyze network latency\nping -c 10 certificates-api.laa.edu.ng\ntraceroute certificates-api.laa.edu.ng\n</code></pre></p> <p>Solutions: <pre><code># Enable query caching\nredis-cli CONFIG SET maxmemory 256mb\nredis-cli CONFIG SET maxmemory-policy allkeys-lru\n\n# Optimize database indexes\nnode scripts/analyze-query-performance.js\nnode scripts/create-missing-indexes.js\n\n# Enable compression\n# Add to nginx.conf:\n# gzip on;\n# gzip_types application/json text/css application/javascript;\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#104-security-incident-response","title":"10.4 Security Incident Response","text":""},{"location":"certificate-automation/technical-documentation/#1041-unauthorized-access-attempt","title":"10.4.1 Unauthorized Access Attempt","text":"<p>Detection: <pre><code># Monitor failed authentication attempts\ngrep \"authentication failed\" /var/log/certificate-service/security.log | tail -20\n\n# Check for suspicious IP addresses\nawk '{print $1}' /var/log/nginx/access.log | sort | uniq -c | sort -nr | head -10\n\n# Review audit logs for unusual activity\nnode scripts/security-audit.js --date $(date +%Y-%m-%d)\n</code></pre></p> <p>Response Actions: <pre><code># Block suspicious IP addresses\nsudo ufw deny from {suspicious_ip}\n\n# Force password reset for affected accounts\nnode scripts/force-password-reset.js --user-id {user_id}\n\n# Review and rotate API keys\nnode scripts/rotate-api-keys.js\n\n# Generate security incident report\nnode scripts/generate-security-report.js --incident-id {incident_id}\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#1042-data-breach-response","title":"10.4.2 Data Breach Response","text":"<p>Immediate Actions: 1. Isolate affected systems 2. Preserve evidence 3. Assess scope of breach 4. Notify stakeholders 5. Implement containment measures</p> <p>Investigation Steps: <pre><code># Analyze access logs\ngrep -E \"(download|export|bulk)\" /var/log/certificate-service/access.log\n\n# Check database access patterns\npsql -h localhost -U cert_user -d certificates -c \"\nSELECT usename, application_name, client_addr, query_start, query \nFROM pg_stat_activity \nWHERE state = 'active';\"\n\n# Review file access logs\nsudo ausearch -f /var/certificates/ -ts recent\n</code></pre></p> <p>Recovery Actions: <pre><code># Reset all user credentials\nnode scripts/mass-password-reset.js\n\n# Regenerate API tokens\nnode scripts/regenerate-all-tokens.js\n\n# Update security configurations\nnode scripts/apply-security-hardening.js\n\n# Conduct security assessment\nnode scripts/security-vulnerability-scan.js\n</code></pre></p>"},{"location":"certificate-automation/technical-documentation/#appendices","title":"Appendices","text":""},{"location":"certificate-automation/technical-documentation/#appendix-a-csv-upload-template","title":"Appendix A: CSV Upload Template","text":"<pre><code>Name,Department,GraduationDate,CertificateID,Email\nJohn Doe,Flight Operations,2025-06-30,LAA2025-001,john.doe@email.com\nJane Smith,Aviation Engineering,2025-06-30,LAA2025-002,jane.smith@email.com\nMichael Johnson,Air Traffic Control,2025-06-30,LAA2025-003,michael.johnson@email.com\nSarah Williams,Aircraft Maintenance,2025-06-30,LAA2025-004,sarah.williams@email.com\nDavid Brown,Aviation Management,2025-06-30,LAA2025-005,david.brown@email.com\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#appendix-b-api-testing-collection","title":"Appendix B: API Testing Collection","text":"<pre><code>{\n  \"info\": {\n    \"name\": \"Certificate Automation API Tests\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n  },\n  \"item\": [\n    {\n      \"name\": \"Generate Certificates\",\n      \"request\": {\n        \"method\": \"POST\",\n        \"header\": [\n          {\n            \"key\": \"Content-Type\",\n            \"value\": \"application/json\"\n          },\n          {\n            \"key\": \"Authorization\",\n            \"value\": \"Bearer {{api_token}}\"\n          }\n        ],\n        \"body\": {\n          \"mode\": \"raw\",\n          \"raw\": \"{\\n  \\\"batch_id\\\": \\\"LAA2025-BATCH-001\\\",\\n  \\\"graduates\\\": [\\n    {\\n      \\\"certificate_id\\\": \\\"LAA2025-001\\\",\\n      \\\"name\\\": \\\"John Doe\\\",\\n      \\\"department\\\": \\\"Flight Operations\\\",\\n      \\\"graduation_date\\\": \\\"2025-06-30\\\",\\n      \\\"email\\\": \\\"john.doe@email.com\\\"\\n    }\\n  ]\\n}\"\n        },\n        \"url\": {\n          \"raw\": \"{{base_url}}/api/v1/certificates/generate\",\n          \"host\": [\"{{base_url}}\"],\n          \"path\": [\"api\", \"v1\", \"certificates\", \"generate\"]\n        }\n      }\n    },\n    {\n      \"name\": \"Check Certificate Status\",\n      \"request\": {\n        \"method\": \"GET\",\n        \"header\": [\n          {\n            \"key\": \"Authorization\",\n            \"value\": \"Bearer {{api_token}}\"\n          }\n        ],\n        \"url\": {\n          \"raw\": \"{{base_url}}/api/v1/certificates/status/{{job_id}}\",\n          \"host\": [\"{{base_url}}\"],\n          \"path\": [\"api\", \"v1\", \"certificates\", \"status\", \"{{job_id}}\"]\n        }\n      }\n    },\n    {\n      \"name\": \"Verify Certificate\",\n      \"request\": {\n        \"method\": \"GET\",\n        \"url\": {\n          \"raw\": \"{{base_url}}/api/v1/verify/LAA2025-001\",\n          \"host\": [\"{{base_url}}\"],\n          \"path\": [\"api\", \"v1\", \"verify\", \"LAA2025-001\"]\n        }\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#appendix-c-environment-configuration-templates","title":"Appendix C: Environment Configuration Templates","text":""},{"location":"certificate-automation/technical-documentation/#laravel-production-environment","title":"Laravel Production Environment","text":"<pre><code># Laravel Application Configuration\nAPP_NAME=\"Certificate Automation Service\"\nAPP_ENV=production\nAPP_KEY=base64:your_generated_app_key_here\nAPP_DEBUG=false\nAPP_URL=https://certificates-api.laa.edu.ng\n\n# Database Configuration\nDB_CONNECTION=pgsql\nDB_HOST=db.laa.edu.ng\nDB_PORT=5432\nDB_DATABASE=certificates_prod\nDB_USERNAME=cert_user\nDB_PASSWORD=your_secure_database_password\n\n# Redis Configuration\nREDIS_HOST=redis.laa.edu.ng\nREDIS_PASSWORD=your_redis_password\nREDIS_PORT=6379\n\n# Queue Configuration\nQUEUE_CONNECTION=redis\nQUEUE_FAILED_DRIVER=database\n\n# Cache Configuration\nCACHE_DRIVER=redis\nSESSION_DRIVER=redis\n\n# Mail Configuration\nMAIL_MAILER=smtp\nMAIL_HOST=smtp.zoho.com\nMAIL_PORT=587\nMAIL_USERNAME=certificates@laa.edu.ng\nMAIL_PASSWORD=your_email_password\nMAIL_ENCRYPTION=tls\n\n# Zoho Integration\nZOHO_CLIENT_ID=1000.XXXXXXXXXX.XXXXXXXXXX\nZOHO_CLIENT_SECRET=your_client_secret\nZOHO_REFRESH_TOKEN=your_refresh_token\nZOHO_API_DOMAIN=https://www.zohoapis.com\n\n# AWS Configuration\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=laa-certificates-prod\n\n# Security Configuration\nBCRYPT_ROUNDS=12\nSANCTUM_STATEFUL_DOMAINS=certificates-api.laa.edu.ng\nSESSION_LIFETIME=120\n\n# Performance Configuration\nOCTANE_SERVER=swoole\nOCTANE_HTTPS=true&lt;/search&gt;\n\n# Email Configuration\nMAIL_FROM_ADDRESS=certificates@laa.edu.ng\nMAIL_FROM_NAME=\"Lagos Aviation Academy\"\n\n# Logging Configuration\nLOG_CHANNEL=stack\nLOG_LEVEL=error\nLOG_SLACK_WEBHOOK_URL=your_slack_webhook_url\n</code></pre>"},{"location":"certificate-automation/technical-documentation/#conclusion","title":"Conclusion","text":"<p>This comprehensive technical documentation provides a complete blueprint for implementing the Lagos Aviation Academy Certificate Automation System using the Zoho ecosystem with a Laravel-based Certificate Automation Service. The system addresses all functional and non-functional requirements while ensuring security, scalability, and maintainability.</p>"},{"location":"certificate-automation/technical-documentation/#key-implementation-highlights","title":"Key Implementation Highlights:","text":"<ol> <li>Zoho Integration: Leverages Zoho Flow, CRM, Forms, Creator, and Sign for seamless workflow automation</li> <li>Laravel Backend: Robust PHP framework for certificate generation service with queue management</li> <li>Multi-Stage Approval: Comprehensive approval workflow with audit trails</li> <li>Security First: End-to-end encryption, digital signatures, and GDPR compliance</li> <li>Scalable Architecture: Designed to handle 1000+ certificates per graduation cycle</li> <li>Monitoring &amp; Maintenance: Complete operational procedures for system health</li> </ol>"},{"location":"certificate-automation/technical-documentation/#next-steps","title":"Next Steps:","text":"<ol> <li>Phase 1: Set up Zoho applications and configure basic workflows</li> <li>Phase 2: Deploy Laravel certificate service with proper infrastructure</li> <li>Phase 3: Implement verification portal and testing procedures</li> <li>Phase 4: Go-live with comprehensive monitoring and support</li> </ol> <p>The system will achieve the target 95% reduction in certificate processing time while maintaining the highest standards of security and compliance for Lagos Aviation Academy's graduation certificate management.</p> <p>Document Version: 1.0 Last Updated: July 31, 2025 Next Review: July 31, 2025</p>"},{"location":"services/booking-service/","title":"Booking Service","text":"<p>The Booking Service is responsible for managing the entire booking lifecycle, from reservation creation to completion and cancellation.</p>"},{"location":"services/booking-service/#overview","title":"Overview","text":"<pre><code>graph TB\n    subgraph \"Booking Service\"\n        API[REST API]\n        LOGIC[Business Logic]\n        EVENTS[Event Handlers]\n    end\n\n    subgraph \"External Services\"\n        PRODUCT[Product Service]\n        PAYMENT[Payment Service]\n        USER[User Service]\n    end\n\n    subgraph \"Data Storage\"\n        DB[(Booking Database)]\n        CACHE[(Redis Cache)]\n    end\n\n    API --&gt; LOGIC\n    LOGIC --&gt; DB\n    LOGIC --&gt; CACHE\n    LOGIC --&gt; EVENTS\n\n    EVENTS --&gt; PRODUCT\n    EVENTS --&gt; PAYMENT\n    EVENTS --&gt; USER</code></pre>"},{"location":"services/booking-service/#key-features","title":"Key Features","text":"<ul> <li>Booking Management: Create, update, and cancel bookings</li> <li>Reservation System: Hold inventory while payment is processed</li> <li>Status Tracking: Track booking status throughout lifecycle</li> <li>Event Integration: Publish and consume booking-related events</li> <li>Validation: Ensure booking data integrity and business rules</li> </ul>"},{"location":"services/booking-service/#booking-lifecycle","title":"Booking Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; Pending: Create Booking\n    Pending --&gt; Reserved: Reserve Inventory\n    Reserved --&gt; Confirmed: Payment Successful\n    Reserved --&gt; Cancelled: Payment Failed\n    Confirmed --&gt; Completed: Service Delivered\n    Confirmed --&gt; Cancelled: User Cancellation\n    Cancelled --&gt; [*]\n    Completed --&gt; [*]\n\n    note right of Reserved\n        Inventory held for\n        limited time\n    end note\n\n    note right of Confirmed\n        Payment processed\n        successfully\n    end note</code></pre>"},{"location":"services/booking-service/#api-endpoints","title":"API Endpoints","text":""},{"location":"services/booking-service/#create-booking","title":"Create Booking","text":"<pre><code>POST /api/bookings\nContent-Type: application/json\nAuthorization: Bearer {token}\n\n{\n  \"product_id\": \"uuid\",\n  \"user_id\": \"uuid\",\n  \"booking_details\": {\n    \"passengers\": [...],\n    \"travel_dates\": {...},\n    \"preferences\": {...}\n  }\n}\n</code></pre>"},{"location":"services/booking-service/#get-booking","title":"Get Booking","text":"<pre><code>GET /api/bookings/{booking_id}\nAuthorization: Bearer {token}\n</code></pre>"},{"location":"services/booking-service/#update-booking","title":"Update Booking","text":"<pre><code>PUT /api/bookings/{booking_id}\nContent-Type: application/json\nAuthorization: Bearer {token}\n\n{\n  \"status\": \"confirmed\",\n  \"updated_details\": {...}\n}\n</code></pre>"},{"location":"services/booking-service/#cancel-booking","title":"Cancel Booking","text":"<pre><code>DELETE /api/bookings/{booking_id}\nAuthorization: Bearer {token}\n</code></pre>"},{"location":"services/booking-service/#event-handling","title":"Event Handling","text":""},{"location":"services/booking-service/#published-events","title":"Published Events","text":"<pre><code>graph LR\n    BOOKING[Booking Service] --&gt; CREATED[booking.created]\n    BOOKING --&gt; CONFIRMED[booking.confirmed]\n    BOOKING --&gt; CANCELLED[booking.cancelled]\n    BOOKING --&gt; COMPLETED[booking.completed]</code></pre>"},{"location":"services/booking-service/#consumed-events","title":"Consumed Events","text":"<pre><code>graph LR\n    PAYMENT[payment.processed] --&gt; BOOKING[Booking Service]\n    INVENTORY[inventory.reserved] --&gt; BOOKING\n    USER[user.updated] --&gt; BOOKING</code></pre>"},{"location":"services/booking-service/#database-schema","title":"Database Schema","text":"<pre><code>erDiagram\n    BOOKINGS {\n        uuid id PK\n        uuid user_id FK\n        uuid product_id FK\n        string status\n        json booking_details\n        decimal total_amount\n        timestamp created_at\n        timestamp updated_at\n    }\n\n    BOOKING_PASSENGERS {\n        uuid id PK\n        uuid booking_id FK\n        string first_name\n        string last_name\n        date date_of_birth\n        string passport_number\n    }\n\n    BOOKING_HISTORY {\n        uuid id PK\n        uuid booking_id FK\n        string previous_status\n        string new_status\n        string reason\n        timestamp changed_at\n    }\n\n    BOOKINGS ||--o{ BOOKING_PASSENGERS : contains\n    BOOKINGS ||--o{ BOOKING_HISTORY : tracks</code></pre>"},{"location":"services/booking-service/#configuration","title":"Configuration","text":""},{"location":"services/booking-service/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>DB_HOST</code> Database host <code>localhost</code> <code>DB_PORT</code> Database port <code>3306</code> <code>DB_DATABASE</code> Database name <code>booking_service</code> <code>REDIS_HOST</code> Redis host <code>localhost</code> <code>REDIS_PORT</code> Redis port <code>6379</code> <code>QUEUE_CONNECTION</code> Queue driver <code>redis</code>"},{"location":"services/booking-service/#docker-configuration","title":"Docker Configuration","text":"<pre><code># docker-compose.yml excerpt\nbooking-service:\n  build: ./travels-booking-service\n  ports:\n    - \"8001:80\"\n  environment:\n    - DB_HOST=booking-db\n    - REDIS_HOST=redis\n  depends_on:\n    - booking-db\n    - redis\n</code></pre>"},{"location":"services/booking-service/#testing","title":"Testing","text":""},{"location":"services/booking-service/#unit-tests","title":"Unit Tests","text":"<pre><code># Run unit tests\nphp artisan test --testsuite=Unit\n\n# Run with coverage\nphp artisan test --coverage\n</code></pre>"},{"location":"services/booking-service/#integration-tests","title":"Integration Tests","text":"<pre><code># Run integration tests\nphp artisan test --testsuite=Feature\n\n# Test specific booking flows\nphp artisan test tests/Feature/BookingFlowTest.php\n</code></pre>"},{"location":"services/booking-service/#monitoring","title":"Monitoring","text":""},{"location":"services/booking-service/#health-check","title":"Health Check","text":"<pre><code>GET /health\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"database\": \"connected\",\n  \"redis\": \"connected\",\n  \"queue\": \"processing\"\n}\n</code></pre></p>"},{"location":"services/booking-service/#metrics","title":"Metrics","text":"<ul> <li>Booking creation rate</li> <li>Booking confirmation rate</li> <li>Average booking processing time</li> <li>Error rates by endpoint</li> </ul>"},{"location":"services/booking-service/#troubleshooting","title":"Troubleshooting","text":""},{"location":"services/booking-service/#common-issues","title":"Common Issues","text":"<ol> <li>Booking Creation Fails</li> <li>Check product availability</li> <li>Verify user authentication</li> <li> <p>Validate booking details format</p> </li> <li> <p>Payment Integration Issues</p> </li> <li>Verify payment service connectivity</li> <li>Check event queue processing</li> <li> <p>Review payment webhook configuration</p> </li> <li> <p>Database Connection Issues</p> </li> <li>Verify database credentials</li> <li>Check network connectivity</li> <li>Review connection pool settings</li> </ol>"},{"location":"services/booking-service/#related-documentation","title":"Related Documentation","text":"<ul> <li>API Documentation</li> <li>Payment Service</li> <li>Product Service</li> <li>Deployment Guide</li> </ul>"}]}